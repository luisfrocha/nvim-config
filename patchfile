diff --git a/LICENSE b/LICENSE
deleted file mode 100644
index 261eeb9..0000000
--- a/LICENSE
+++ /dev/null
@@ -1,201 +0,0 @@
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
-   APPENDIX: How to apply the Apache License to your work.
-
-      To apply the Apache License to your work, attach the following
-      boilerplate notice, with the fields enclosed by brackets "[]"
-      replaced with your own identifying information. (Don't include
-      the brackets!)  The text should be enclosed in the appropriate
-      comment syntax for the file format. We also recommend that a
-      file or class name and description of purpose be included on the
-      same "printed page" as the copyright notice for easier
-      identification within third-party archives.
-
-   Copyright [yyyy] [name of copyright owner]
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
diff --git a/README.md b/README.md
index 185280b..49a0c58 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,3 @@
-# 💤 LazyVim
+# Neovim configuration
 
-A starter template for [LazyVim](https://github.com/LazyVim/LazyVim).
-Refer to the [documentation](https://lazyvim.github.io/installation) to get started.
+Always a WIP.
diff --git a/init.lua b/init.lua
index f9d1f41..81e94f6 100644
--- a/init.lua
+++ b/init.lua
@@ -1,4 +1,7 @@
--- bootstrap lazy.nvim, LazyVim and your plugins
+require("config.keymaps")
+require("config.options")
+require("config.autocmds")
+require("config.abbreviations")
 require("config.lazy")
 
 -- Set terminal background to transparent
@@ -27,5 +30,3 @@ if vim.g.neovide then
   vim.g.neovide_cursor_vfx_particle_lifetime = 3
   vim.g.neovide_cursor_vfx_particle_density = 35.0
 end
-
-vim.node_host_prog = "/Users/luisrocha/.nvm/versions/node/v20.6.0/bin:node"
diff --git a/lazy-lock.json b/lazy-lock.json
index 7f4156c..53b343f 100644
--- a/lazy-lock.json
+++ b/lazy-lock.json
@@ -1,71 +1,84 @@
 {
-  "LazyVim": { "branch": "main", "commit": "5646ee5191da244ff8ea57b9dba8a7e0d1dbdd42" },
-  "LuaSnip": { "branch": "master", "commit": "a7a4b4682c4b3e2ba82b82a4e6e5f5a0e79dec32" },
-  "catppuccin": { "branch": "main", "commit": "aebe43db9cb26e1c70fc5b2fd4158169c405e720" },
-  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },
+  "Comment.nvim": { "branch": "master", "commit": "0236521ea582747b58869cb72f70ccfa967d2e89" },
+  "FixCursorHold.nvim": { "branch": "master", "commit": "1900f89dc17c603eec29960f57c00bd9ae696495" },
+  "LuaSnip": { "branch": "master", "commit": "03c8e67eb7293c404845b3982db895d59c0d1538" },
+  "alpha-nvim": { "branch": "main", "commit": "41283fb402713fc8b327e60907f74e46166f4cfd" },
+  "auto-session": { "branch": "main", "commit": "9e0a169b6fce8791278abbd110717b921afe634d" },
+  "breadcrumbs.nvim": { "branch": "master", "commit": "9f764278784ce2f10dbe2f555ba14be2451d36a0" },
+  "bufdelete.nvim": { "branch": "master", "commit": "f6bcea78afb3060b198125256f897040538bcb81" },
   "cmp-nvim-lsp": { "branch": "main", "commit": "5af77f54de1b16c34b23cba810150689a3a90312" },
   "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },
   "cmp_luasnip": { "branch": "master", "commit": "05a9ab28b53f71d1aece421ef32fee2cb857a843" },
-  "conform.nvim": { "branch": "master", "commit": "9d5ba06d6ee7418c674f498634617416d15b6239" },
-  "dashboard-nvim": { "branch": "master", "commit": "39f308a0b845b8da46f83c8a2d69f0191d4b7a8f" },
+  "conform.nvim": { "branch": "master", "commit": "a6965ac128eba75537ec2bc5ddd5d5e357062bdc" },
+  "diffview.nvim": { "branch": "main", "commit": "3dc498c9777fe79156f3d32dddd483b8b3dbd95f" },
   "dressing.nvim": { "branch": "master", "commit": "18e5beb3845f085b6a33c24112b37988f3f93c06" },
-  "dropbar.nvim": { "branch": "master", "commit": "a5f3d6a172fceadcfed58b8c209ac3211635a3c8" },
+  "dropbar.nvim": { "branch": "master", "commit": "26173fd5347bddc28fdc645d7020abd860754a73" },
   "edgy.nvim": { "branch": "main", "commit": "de79b7d92a5979cd71a9a1d8b6282515345e5055" },
-  "flash.nvim": { "branch": "main", "commit": "48817af25f51c0590653bbc290866e4890fe1cbe" },
-  "fold-preview.nvim": { "branch": "main", "commit": "b7920cb0aba2b48a6b679bff45f98c3ebc0f0b89" },
-  "friendly-snippets": { "branch": "main", "commit": "dcd4a586439a1c81357d5b9d26319ae218cc9479" },
-  "gitsigns.nvim": { "branch": "main", "commit": "70584ff9aae8078b64430c574079d79620b8f06d" },
+  "editorconfig-vim": { "branch": "master", "commit": "8b7da79e9daee7a3f3a8d4fe29886b9756305aff" },
+  "flit.nvim": { "branch": "main", "commit": "56490317983218b09698f8c960c3669958b12b32" },
+  "friendly-snippets": { "branch": "main", "commit": "ea068f1becd91bcd4591fceb6420d4335e2e14d3" },
+  "gitsigns.nvim": { "branch": "main", "commit": "52f8da33cc0cadbf1164c4a91c8bfd6895533d67" },
   "hydra.nvim": { "branch": "master", "commit": "55de54543d673824435930ecf533256eea2e565b" },
   "kanagawa.nvim": { "branch": "master", "commit": "bfa818c7bf6259152f1d89cf9fbfba3554c93695" },
-  "keymap-amend.nvim": { "branch": "master", "commit": "b8bf9d820878d5497fdd11d6de55dea82872d98e" },
-  "lazy.nvim": { "branch": "main", "commit": "bef521ac89c8d423f9d092e37b58e8af0c099309" },
-  "lspsaga.nvim": { "branch": "main", "commit": "d5aa1a02a23b5725054928426b1de6932a6d3bc3" },
-  "lualine.nvim": { "branch": "master", "commit": "b5e8bb642138f787a2c1c5aedc2a78cb2cebbd67" },
-  "mason-lspconfig.nvim": { "branch": "main", "commit": "9dfcf2036c223920826140f0151d929a43f9eceb" },
-  "mason-tool-installer.nvim": { "branch": "main", "commit": "1212fb6082b7177dde17ea65e429e027835aeb40" },
+  "lazy.nvim": { "branch": "main", "commit": "31ddbea7c10b6920c9077b66c97951ca8682d5c8" },
+  "leap.nvim": { "branch": "main", "commit": "626be4c4ec040aeaf6466c9aae17ee0ab09f1a5b" },
+  "lspkind.nvim": { "branch": "master", "commit": "1735dd5a5054c1fb7feaf8e8658dbab925f4f0cf" },
+  "lualine-so-fancy.nvim": { "branch": "main", "commit": "21284504fed2776668fdea8743a528774de5d2e1" },
+  "lualine.nvim": { "branch": "master", "commit": "0a5a66803c7407767b799067986b4dc3036e1983" },
+  "mason-lspconfig.nvim": { "branch": "main", "commit": "44509689b9bf3984d729cc264aacb31cb7f41668" },
+  "mason-null-ls.nvim": { "branch": "main", "commit": "de19726de7260c68d94691afb057fa73d3cc53e7" },
   "mason.nvim": { "branch": "main", "commit": "751b1fcbf3d3b783fcf8d48865264a9bcd8f9b10" },
-  "mini.ai": { "branch": "main", "commit": "ee9446a17c160aba6a04ff22097389c41872c878" },
-  "mini.bufremove": { "branch": "main", "commit": "931a3bb514147d9e812767275c4beba6b779b1d3" },
-  "mini.comment": { "branch": "main", "commit": "a4b7e46deb9ad2feb8902cc5dbf087eced112ee5" },
-  "mini.hipatterns": { "branch": "main", "commit": "0a72439dbded766af753a3e7ec0a5b21d0f8ada0" },
-  "mini.indentscope": { "branch": "main", "commit": "cf07f19e718ebb0bcc5b00999083ce11c37b8d40" },
   "mini.pairs": { "branch": "main", "commit": "04f58f2545ed80ac3b52dd4826e93f33e15b2af6" },
-  "mini.surround": { "branch": "main", "commit": "49e0364b8c9a3258b485c5ece40bb0f3a5e94b1c" },
-  "multicursors.nvim": { "branch": "main", "commit": "8b3e14682eed06a532b155c7eae33e174846b3fd" },
-  "neo-tree.nvim": { "branch": "v3.x", "commit": "16d1b194376bf1fc2acd89ccb3c29ba8315bfcea" },
-  "neoconf.nvim": { "branch": "main", "commit": "ef304c29977b85c99382fcba821b3f710e144a74" },
+  "multicursors.nvim": { "branch": "main", "commit": "b959ad0f38881e81e757208c6adfc9e6dc24dfc7" },
+  "neo-tree.nvim": { "branch": "v2.x", "commit": "80dc74d081823649809f78370fa5b204aa9a853a" },
   "neodev.nvim": { "branch": "main", "commit": "ce9a2e8eaba5649b553529c5498acb43a6c317cd" },
+  "neogen": { "branch": "main", "commit": "0daffcec249bf42275e322361fe55b89a05ff278" },
+  "neoscroll.nvim": { "branch": "master", "commit": "4fcb1c1d73bc513a6e63bb24e741a7b97472dad9" },
+  "neotest": { "branch": "master", "commit": "f03a78cef74db5638e4312e18b767294a90de8da" },
+  "neotest-go": { "branch": "main", "commit": "6a2f996d89fe4631942e035b1c114544ee045043" },
   "noice.nvim": { "branch": "main", "commit": "0cbe3f88d038320bdbda3c4c5c95f43a13c3aa12" },
-  "none-ls.nvim": { "branch": "main", "commit": "18910d09d21d7df339805343bfe4a2b2e41c057b" },
+  "none-ls-extras.nvim": { "branch": "main", "commit": "f0746bf4f1a21d6e1d2002f671fb9b46d2146de7" },
+  "none-ls-shellcheck.nvim": { "branch": "main", "commit": "0f84461241e76e376a95fb7391deac82dc3efdbf" },
+  "none-ls.nvim": { "branch": "main", "commit": "09a7c58e9283dda582d9805f6b182b5b9f137ec7" },
   "nui.nvim": { "branch": "main", "commit": "cbd2668414331c10039278f558630ed19b93e69b" },
-  "nvim-cmp": { "branch": "main", "commit": "97dc716fc914c46577a4f254035ebef1aa72558a" },
-  "nvim-lint": { "branch": "master", "commit": "2669aabb8362fdc36aced5ba864b7135636ea863" },
-  "nvim-lspconfig": { "branch": "master", "commit": "6e5c78ebc9936ca74add66bda22c566f951b6ee5" },
+  "nvim-autopairs": { "branch": "master", "commit": "4f41e5940bc0443fdbe5f995e2a596847215cd2a" },
+  "nvim-cmp": { "branch": "main", "commit": "ce16de5665c766f39c271705b17fff06f7bcb84f" },
+  "nvim-dap": { "branch": "master", "commit": "405df1dcc2e395ab5173a9c3d00e03942c023074" },
+  "nvim-dap-ui": { "branch": "master", "commit": "edfa93f60b189e5952c016eee262d0685d838450" },
+  "nvim-dap-virtual-text": { "branch": "master", "commit": "3e8e207513e6ef520894950acd76b79902714103" },
+  "nvim-lint": { "branch": "master", "commit": "f098232d70cebe90e27404928c9bc19ca7a5a7b5" },
+  "nvim-lspconfig": { "branch": "master", "commit": "9266dc26862d8f3556c2ca77602e811472b4c5b8" },
+  "nvim-navic": { "branch": "master", "commit": "8649f694d3e76ee10c19255dece6411c29206a54" },
+  "nvim-nio": { "branch": "master", "commit": "5800f585def265d52f1d8848133217c800bcb25d" },
   "nvim-notify": { "branch": "master", "commit": "5371f4bfc1f6d3adf4fe9d62cd3a9d44356bfd15" },
-  "nvim-spectre": { "branch": "master", "commit": "2b012554a2536465243c0dff3605b5927c49ed23" },
-  "nvim-treesitter": { "branch": "master", "commit": "f84887230af1f7581e29ccd5d93f59d98058d565" },
-  "nvim-treesitter-context": { "branch": "master", "commit": "f19766163c18515fb4d3c12d572bf9cba6cdb990" },
-  "nvim-treesitter-textobjects": { "branch": "master", "commit": "d2a4ffc22d9d38d44edb73da007b3cf43451e9b4" },
+  "nvim-spectre": { "branch": "master", "commit": "9653847cf2f225648967f6e9363643e327387579" },
+  "nvim-surround": { "branch": "main", "commit": "a4e30d33add8a9743b4f518b3a788b3c8e5def71" },
+  "nvim-treesitter": { "branch": "master", "commit": "b350369740e885c85f0f62dd8fe645c6f887ddc6" },
+  "nvim-treesitter-textobjects": { "branch": "master", "commit": "23b820146956b3b681c19e10d3a8bc0cbd9a1d4c" },
   "nvim-ts-autotag": { "branch": "main", "commit": "531f48334c422222aebc888fd36e7d109cb354cd" },
-  "nvim-ts-context-commentstring": { "branch": "main", "commit": "734ebad31c81c6198dfe102aa23280937c937c42" },
-  "nvim-web-devicons": { "branch": "master", "commit": "3ee60deaa539360518eaab93a6c701fe9f4d82ef" },
+  "nvim-ts-context-commentstring": { "branch": "main", "commit": "a6382f744f584bbf71d0a563af789af7190aabda" },
+  "nvim-web-devicons": { "branch": "master", "commit": "b3468391470034353f0e5110c70babb5c62967d3" },
   "package-info.nvim": { "branch": "master", "commit": "45acce5b12ce824332d8000cc2c91805b6710446" },
   "persistence.nvim": { "branch": "main", "commit": "4982499c1636eac254b72923ab826ee7827b3084" },
   "plenary.nvim": { "branch": "master", "commit": "8aad4396840be7fc42896e3011751b7609ca4119" },
-  "project.nvim": { "branch": "main", "commit": "8c6bad7d22eef1b71144b401c9f74ed01526a4fb" },
+  "schemastore.nvim": { "branch": "main", "commit": "f660f74bcaae950a77c69dda91270063c8cbd692" },
   "searchbox.nvim": { "branch": "main", "commit": "110949af8963185b4e732b45ae57beb731bfcede" },
-  "symbols-outline.nvim": { "branch": "master", "commit": "564ee65dfc9024bdde73a6621820866987cbb256" },
-  "tailwindcss-colorizer-cmp.nvim": { "branch": "main", "commit": "3d3cd95e4a4135c250faf83dd5ed61b8e5502b86" },
+  "sqlite.lua": { "branch": "master", "commit": "40701b6151f8883980c1548647116de39b763540" },
+  "telescope-dap.nvim": { "branch": "master", "commit": "8c88d9716c91eaef1cdea13cb9390d8ef447dbfe" },
+  "telescope-frecency.nvim": { "branch": "master", "commit": "94a532cb9c4713db83acf5432f5aadfd096e2af9" },
   "telescope-fzf-native.nvim": { "branch": "main", "commit": "9ef21b2e6bb6ebeaf349a0781745549bbb870d27" },
-  "telescope.nvim": { "branch": "master", "commit": "b22e6f6896cd64b109bd0807a24098d225d5fb49" },
+  "telescope-ui-select.nvim": { "branch": "master", "commit": "6e51d7da30bd139a6950adf2a47fda6df9fa06d2" },
+  "telescope.nvim": { "branch": "master", "commit": "d00d9df48c00d8682c14c2b5da78bda7ef06b939" },
   "todo-comments.nvim": { "branch": "main", "commit": "a7e39ae9e74f2c8c6dc4eea6d40c3971ae84752d" },
-  "tokyonight.nvim": { "branch": "main", "commit": "9bf9ec53d5e87b025e2404069b71e7ebdc3a13e5" },
+  "toggleterm.nvim": { "branch": "main", "commit": "193786e0371e3286d3bc9aa0079da1cd41beaa62" },
   "trouble.nvim": { "branch": "main", "commit": "b9cf677f20bb2faa2dacfa870b084e568dca9572" },
   "tw-values.nvim": { "branch": "main", "commit": "3808621a53f6ac9c151b77d9df61b29991c12921" },
-  "vim-css-color": { "branch": "master", "commit": "faa65935660a4596414fe21d57e2110faeb9e869" },
+  "typescript-tools.nvim": { "branch": "master", "commit": "c43d9580c3ff5999a1eabca849f807ab33787ea7" },
+  "undotree": { "branch": "master", "commit": "56c684a805fe948936cda0d1b19505b84ad7e065" },
+  "vim-fugitive": { "branch": "master", "commit": "dac8e5c2d85926df92672bf2afb4fc48656d96c7" },
   "vim-illuminate": { "branch": "master", "commit": "305bf07b919ac526deb5193280379e2f8b599926" },
-  "vim-signify": { "branch": "master", "commit": "7d538b77a5a8806e344b057f8846f6d0c035efa9" },
-  "vim-startuptime": { "branch": "master", "commit": "ac2cccb5be617672add1f4f3c0a55ce99ba34e01" },
-  "vim-surround": { "branch": "master", "commit": "3d188ed2113431cf8dac77be61b842acb64433d9" },
+  "vim-rhubarb": { "branch": "master", "commit": "ee69335de176d9325267b0fd2597a22901d927b1" },
+  "vim-signify": { "branch": "master", "commit": "8670143f9e12ed1cd3c9b2c54f345cdd9a4baac3" },
+  "vim-sleuth": { "branch": "master", "commit": "1cc4557420f215d02c4d2645a748a816c220e99b" },
   "which-key.nvim": { "branch": "main", "commit": "4433e5ec9a507e5097571ed55c02ea9658fb268a" }
 }
\ No newline at end of file
diff --git a/lua/config/abbreviations.lua b/lua/config/abbreviations.lua
new file mode 100644
index 0000000..399af89
--- /dev/null
+++ b/lua/config/abbreviations.lua
@@ -0,0 +1,10 @@
+-- inoreabbrev (Insert mode abbreviations)
+-- iabbrev (Insert and Command-line mode abbreviations)
+
+vim.cmd([[
+inoreabbrev seperate separate
+inoreabbrev dont don't
+inoreabbrev btw by the way
+inoreabbrev im I'm
+inoreabbrev youre you're
+]])
diff --git a/lua/config/autocmds.lua b/lua/config/autocmds.lua
index 2a15150..0d96218 100644
--- a/lua/config/autocmds.lua
+++ b/lua/config/autocmds.lua
@@ -1,12 +1,159 @@
--- Autocmds are automatically loaded on the VeryLazy event
--- Default autocmds that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/autocmds.lua
--- Add any additional autocmds here
+local api = vim.api
 
-vim.api.nvim_create_autocmd({ "VimEnter" }, {
-  group = vim.api.nvim_create_augroup("lazyvim_autostart_session", { clear = true }),
+-- api.nvim_command("autocmd BufReadPost,BufNewFile *.vue setlocal filetype=vue")
+
+-- don't auto comment new line
+api.nvim_create_autocmd("BufEnter", { command = [[set formatoptions-=cro]] })
+
+-- wrap words "softly" (no carriage return) in mail buffer
+api.nvim_create_autocmd("Filetype", {
+  pattern = "mail",
+  callback = function()
+    vim.opt.textwidth = 0
+    vim.opt.wrapmargin = 0
+    vim.opt.wrap = true
+    vim.opt.linebreak = true
+    vim.opt.columns = 80
+    vim.opt.colorcolumn = "80"
+  end,
+})
+
+-- Highlight on yank
+api.nvim_create_autocmd("TextYankPost", {
+  callback = function()
+    vim.highlight.on_yank()
+  end,
+})
+
+-- go to last loc when opening a buffer
+-- this mean that when you open a file, you will be at the last position
+api.nvim_create_autocmd("BufReadPost", {
   callback = function()
-    require("persistence").load()
+    local mark = vim.api.nvim_buf_get_mark(0, '"')
+    local lcount = vim.api.nvim_buf_line_count(0)
+    if mark[1] > 0 and mark[1] <= lcount then
+      pcall(vim.api.nvim_win_set_cursor, 0, mark)
+    end
   end,
 })
 
-vim.api.nvim_command("autocmd BufReadPost,BufNewFile *.vue setlocal filetype=vue")
+-- auto close brackets
+-- this
+api.nvim_create_autocmd("FileType", { pattern = "man", command = [[nnoremap <buffer><silent> q :quit<CR>]] })
+
+-- show cursor line only in active window
+local cursorGrp = api.nvim_create_augroup("CursorLine", { clear = true })
+
+api.nvim_create_autocmd({ "InsertLeave", "WinEnter" }, {
+  pattern = "*",
+  command = "set cursorline",
+  group = cursorGrp,
+})
+
+api.nvim_create_autocmd(
+  { "InsertEnter", "WinLeave" },
+  { pattern = "*", command = "set nocursorline", group = cursorGrp }
+)
+
+-- Enable spell checking for certain file types
+api.nvim_create_autocmd(
+  { "BufRead", "BufNewFile" },
+  -- { pattern = { "*.txt", "*.md", "*.tex" }, command = [[setlocal spell<cr> setlocal spelllang=en,de<cr>]] }
+  {
+    pattern = { "*.txt", "*.md", "*.tex" },
+    callback = function()
+      vim.opt.spell = true
+      vim.opt.spelllang = "en,de"
+    end,
+  }
+)
+
+vim.api.nvim_create_autocmd("ColorScheme", {
+  callback = function()
+    -- change the background color of floating windows and borders.
+    -- vim.cmd('highlight NormalFloat guibg=none guifg=none')
+    -- vim.cmd('highlight FloatBorder guifg=' .. colors.fg .. ' guibg=none')
+    -- vim.cmd('highlight NormalNC guibg=none guifg=none')
+
+    -- vim.cmd('highlight TelescopeBorder guifg=' .. colors.fg .. ' guibg=none')
+    -- vim.cmd('highlight TelescopePromptBorder guifg=' .. colors.fg .. ' guibg=none')
+    -- vim.cmd('highlight TelescopeResultsBorder guifg=' .. colors.fg .. ' guibg=none')
+    --
+    -- vim.cmd('highlight TelescopePromptTitle guifg=' .. colors.fg .. ' guibg=none')
+    -- vim.cmd('highlight TelescopeResultsTitle guifg=' .. colors.fg .. ' guibg=none')
+    -- vim.cmd('highlight TelescopePreviewTitle guifg=' .. colors.fg .. ' guibg=none')
+    --
+
+    -- change neotree background colors
+    -- Default: NeoTreeNormal  xxx ctermfg=223 ctermbg=232 guifg=#d4be98 guibg=#141617
+    -- vim.cmd('highlight NeoTreeNormal guibg=#252e33 guifg=none')
+    -- vim.cmd('highlight NeoTreeFloatNormal guifg=none guibg=none')
+    -- vim.cmd('highlight NeoTreeFloatBorder gui=none guifg=' .. colors.fg .. ' guibg=none')
+    -- vim.cmd('highlight NeoTreeEndOfBuffer guibg=#252e33') -- 1d2021
+
+    vim.api.nvim_set_hl(0, "FloatBorder", { link = "Normal" })
+    vim.api.nvim_set_hl(0, "LspInfoBorder", { link = "Normal" })
+    vim.api.nvim_set_hl(0, "NormalFloat", { link = "Normal" })
+
+    vim.cmd("highlight Winbar guibg=none")
+
+    -- vim.cmd("highlight Comment guifg=#475558")
+    -- vim.cmd("highlight Comment guifg=green")
+  end,
+})
+
+-- close some filetypes with <q>
+vim.api.nvim_create_autocmd("FileType", {
+  group = vim.api.nvim_create_augroup("close_with_q", { clear = true }),
+  pattern = {
+    "PlenaryTestPopup",
+    "help",
+    "lspinfo",
+    "man",
+    "notify",
+    "qf",
+    "spectre_panel",
+    "startuptime",
+    "tsplayground",
+    "neotest-output",
+    "checkhealth",
+    "neotest-summary",
+    "neotest-output-panel",
+  },
+  callback = function(event)
+    vim.bo[event.buf].buflisted = false
+    vim.keymap.set("n", "q", "<cmd>close<cr>", { buffer = event.buf, silent = true })
+  end,
+})
+
+-- resize neovim split when terminal is resized
+vim.api.nvim_command("autocmd VimResized * wincmd =")
+
+-- fix terraform and hcl comment string
+vim.api.nvim_create_autocmd("FileType", {
+  group = vim.api.nvim_create_augroup("FixTerraformCommentString", { clear = true }),
+  callback = function(ev)
+    vim.bo[ev.buf].commentstring = "# %s"
+  end,
+  pattern = { "terraform", "hcl" },
+})
+
+-- -- Golang format on save
+-- local goformat_sync_grp = vim.api.nvim_create_augroup("GoFormat", {})
+-- vim.api.nvim_create_autocmd("BufWritePre", {
+--   pattern = "*.go",
+--   callback = function()
+--     require('go.format').gofmt()
+--   end,
+--   group = goformat_sync_grp,
+-- })
+--
+-- Run gofmt + goimport on save
+local goimport_sync_grp = vim.api.nvim_create_augroup("GoImport", {})
+vim.api.nvim_create_autocmd("BufWritePre", {
+  pattern = "*.go",
+  callback = function()
+    require("go.format").goimport()
+  end,
+  group = goimport_sync_grp,
+})
diff --git a/lua/config/icons.lua b/lua/config/icons.lua
new file mode 100644
index 0000000..95aa6d5
--- /dev/null
+++ b/lua/config/icons.lua
@@ -0,0 +1,155 @@
+return {
+    kind = {
+      Array = "",
+      Boolean = "",
+      Class = "",
+      Color = "",
+      Constant = "",
+      Constructor = "",
+      Enum = "",
+      EnumMember = "",
+      Event = "",
+      Field = "",
+      File = "",
+      Folder = "",
+      Function = "",
+      Interface = "",
+      Key = "",
+      Keyword = "",
+      Method = "",
+      Module = "",
+      Namespace = "",
+      Null = "ﳠ",
+      Number = "",
+      Object = "",
+      Operator = "",
+      Package = "",
+      Property = "",
+      Reference = "",
+      Snippet = "",
+      String = "",
+      Struct = "",
+      Text = "",
+      TypeParameter = "",
+      Unit = "",
+      Value = "",
+      Variable = "",
+    },
+    git = {
+      LineAdded = "",
+      LineModified = "",
+      LineRemoved = "",
+      FileDeleted = "",
+      FileIgnored = "◌",
+      FileRenamed = "",
+      FileStaged = "S",
+      FileUnmerged = "",
+      FileUnstaged = "",
+      FileUntracked = "U",
+      Diff = "",
+      Repo = "",
+      Octoface = "",
+      Branch = "",
+    },
+    ui = {
+      ArrowCircleDown = "",
+      ArrowCircleLeft = "",
+      ArrowCircleRight = "",
+      ArrowCircleUp = "",
+      BoldArrowDown = "",
+      BoldArrowLeft = "",
+      BoldArrowRight = "",
+      BoldArrowUp = "",
+      BoldClose = "",
+      BoldDividerLeft = "",
+      BoldDividerRight = "",
+      BoldLineLeft = "▎",
+      BookMark = "",
+      BoxChecked = "",
+      Bug = "",
+      Stacks = "",
+      Scopes = "",
+      Watches = "",
+      DebugConsole = "",
+      Calendar = "",
+      Check = "",
+      ChevronRight = ">",
+      ChevronShortDown = "",
+      ChevronShortLeft = "",
+      ChevronShortRight = "",
+      ChevronShortUp = "",
+      Circle = "",
+      Close = "",
+      CloudDownload = "",
+      Code = "",
+      Comment = "",
+      Dashboard = "",
+      DividerLeft = "",
+      DividerRight = "",
+      DoubleChevronRight = "»",
+      Ellipsis = "",
+      EmptyFolder = "",
+      EmptyFolderOpen = "",
+      File = "",
+      FileSymlink = "",
+      Files = "",
+      FindFile = "",
+      FindText = "",
+      Fire = "",
+      Folder = "",
+      FolderOpen = "",
+      FolderSymlink = "",
+      Forward = "",
+      Gear = "",
+      History = "",
+      Lightbulb = "",
+      LineLeft = "▏",
+      LineMiddle = "│",
+      List = "",
+      Lock = "",
+      NewFile = "",
+      Note = "",
+      Package = "",
+      Pencil = "",
+      Plus = "",
+      Project = "",
+      Search = "",
+      SignIn = "",
+      SignOut = "",
+      Tab = "",
+      Table = "",
+      Target = "󰀘",
+      Telescope = "",
+      Text = "",
+      Tree = "",
+      Triangle = "契",
+      TriangleShortArrowDown = "",
+      TriangleShortArrowLeft = "",
+      TriangleShortArrowRight = "",
+      TriangleShortArrowUp = "",
+    },
+    diagnostics = {
+      BoldError = "",
+      Error = "",
+      BoldWarning = "",
+      Warning = "",
+      BoldInformation = "",
+      Information = "",
+      BoldQuestion = "",
+      Question = "",
+      BoldHint = "",
+      Hint = "",
+      Debug = "",
+      Trace = "✎",
+    },
+    misc = {
+      Robot = "ﮧ",
+      Squirrel = "",
+      Tag = "",
+      Watch = "",
+      Smiley = "",
+      Package = "",
+      CircuitBoard = "",
+    },
+  }
+  
\ No newline at end of file
diff --git a/lua/config/keymaps.lua b/lua/config/keymaps.lua
index dc6e9f2..b0e379e 100644
--- a/lua/config/keymaps.lua
+++ b/lua/config/keymaps.lua
@@ -1,149 +1,124 @@
--- Keymaps are automatically loaded on the VeryLazy event
--- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua
--- Add any additional keymaps here
-
-local function map(mode, lhs, rhs, opts)
-  local keys = require("lazy.core.handler").handlers.keys
-  ---@cast keys LazyKeysHandler
-  -- do not create the keymap if a lazy keys handler exists
-  if not keys.active[keys.parse({ lhs, mode = mode }).id] then
-    opts = opts or {}
-    opts.silent = opts.silent ~= false
-    if opts.remap and not vim.g.vscode then
-      opts.remap = nil
-    end
-    vim.keymap.set(mode, lhs, rhs, opts)
-  end
-end
-
--- Resize window using <ctrl> arrow keys
-map("n", "<C-S-Up>", "<cmd>resize +2<cr>", { desc = "Increase window height" })
-map("n", "<C-S-Down>", "<cmd>resize -2<cr>", { desc = "Decrease window height" })
-map("n", "<C-S-Left>", "<cmd>vertical resize -2<cr>", { desc = "Decrease window width" })
-map("n", "<C-S-Right>", "<cmd>vertical resize +2<cr>", { desc = "Increase window width" })
+local opts = { noremap = true, silent = true }
+local map = vim.keymap.set
+
+-- Keep cursor centered when scrolling
+map("n", "<C-d>", "<C-d>zz", opts)
+map("n", "<C-u>", "<C-u>zz", opts)
+
+-- Move selected line / block of text in visual mode
+map("v", "J", ":m '>+1<CR>gv=gv", opts)
+map("v", "K", ":m '<-2<CR>gv=gv", opts)
+
+-- Fast saving
+map("n", "<Leader>w", ":write!<CR>", opts)
+map("n", "<Leader>q", ":q!<CR>", opts)
+
+-- Remap for dealing with visual line wraps
+map("n", "k", "v:count == 0 ? 'gk' : 'k'", { expr = true })
+map("n", "j", "v:count == 0 ? 'gj' : 'j'", { expr = true })
+
+-- better indenting
+map("v", "<", "<gv")
+map("v", ">", ">gv")
+
+-- paste over currently selected text without yanking it
+map("v", "p", '"_dp')
+map("v", "P", '"_dP')
+
+-- copy everything between { and } including the brackets
+-- p puts text after the cursor,
+-- P puts text before the cursor.
+map("n", "YY", "va{Vy", opts)
+
+-- Move line on the screen rather than by line in the file
+map("n", "j", "gj", opts)
+map("n", "k", "gk", opts)
+
+-- Exit on jj and jk
+map("i", "jj", "<ESC>", opts)
+map("i", "jk", "<ESC>", opts)
+
+-- Move to start/end of line
+map({ "n", "x", "o" }, "H", "^", opts)
+map({ "n", "x", "o" }, "L", "g_", opts)
+
+-- Navigate buffers
+map("n", "<M-Right>", ":bnext<CR>", opts)
+map("n", "<M-Left>", ":bprevious<CR>", opts)
+
+-- Panes resizing
+map("n", "+", ":vertical resize +5<CR>")
+map("n", "_", ":vertical resize -5<CR>")
+map("n", "=", ":resize +5<CR>")
+map("n", "-", ":resize -5<CR>")
+
+-- Map enter to ciw in normal mode
+map("n", "<CR>", "ciw", opts)
+map("n", "<BS>", "ci", opts)
+
+map("n", "n", "nzzv", opts)
+map("n", "N", "Nzzv", opts)
+map("n", "*", "*zzv", opts)
+map("n", "#", "#zzv", opts)
+map("n", "g*", "g*zz", opts)
+map("n", "g#", "g#zz", opts)
+
+-- map ; to resume last search
+-- map("n", ";", "<cmd>Telescope resume<cr>", opts)
+
+-- search current buffer
+map("n", "<C-s>", ":Telescope current_buffer_fuzzy_find<CR>", opts)
+
+-- search modified files
+map("n", "<Leader>m", ":Telescope git_status<CR>", opts)
+
+-- Split line with X
+map("n", "X", ":keeppatterns substitute/\\s*\\%#\\s*/\\r/e <bar> normal! ==^<cr>", { silent = true })
+
+-- Select all
+map("n", "<C-a>", "ggVG", opts)
+
+-- write file in current directory
+-- :w %:h/<new-file-name>
+map("n", "<C-n>", ":w %:h/", opts)
+
+-- delete forward
+-- w{number}dw
+-- delete backward
+-- w{number}db
+
+map("n", "<C-P>", ':lua require("config.utils").toggle_go_test()<CR>', opts)
+
+map("n", "<Esc>", ":nohlsearch<CR>", opts)
+
+-- ctrl + x to cut full line
+map("n", "<C-x>", "dd", opts)
+
 -- Move Lines
-map("n", "<C-S-j>", "<cmd>m .+1<cr>==", { desc = "Move down" })
-map("n", "<C-S-k>", "<cmd>m .-2<cr>==", { desc = "Move up" })
-map("i", "<C-S-j>", "<esc><cmd>m .+1<cr>==gi", { desc = "Move down" })
-map("i", "<C-S-k>", "<esc><cmd>m .-2<cr>==gi", { desc = "Move up" })
-map("v", "<C-S-j>", ":m '>+1<cr>gv=gv", { desc = "Move down" })
-map("v", "<C-S-k>", ":m '<-2<cr>gv=gv", { desc = "Move up" })
-
-map({ "n", "v", "x" }, "<C-BS>", '"_dd<esc>', { desc = "Delete line (not cut)" })
-map({ "i" }, "<C-BS>", '<C-o>"_dd<esc>', { desc = "Delete line (not cut)" })
+map("n", "<C-S-j>", "<cmd>m .+1<cr>==", { desc = "Move down", noremap = true, silent = true })
+map("n", "<C-S-k>", "<cmd>m .-2<cr>==", { desc = "Move up", noremap = true, silent = true })
+map("i", "<C-S-j>", "<esc><cmd>m .+1<cr>==gi", { desc = "Move down", noremap = true, silent = true })
+map("i", "<C-S-k>", "<esc><cmd>m .-2<cr>==gi", { desc = "Move up", noremap = true, silent = true })
+map("v", "<C-S-j>", ":m '>+1<cr>gv=gv", { desc = "Move down", noremap = true, silent = true })
+map("v", "<C-S-k>", ":m '<-2<cr>gv=gv", { desc = "Move up", noremap = true, silent = true })
+
+map({ "n", "v", "x" }, "<C-BS>", '"_dd<esc>', { desc = "Delete line (not cut)", noremap = true, silent = true })
+map({ "i" }, "<C-BS>", '<C-o>"_dd<esc>', { desc = "Delete line (not cut)", noremap = true, silent = true })
 -- map({ "n" }, "<C-.>", ":Lspsaga code_action<cr>", { desc = "Show code actions menu" })
-map({ "i", "n", "x" }, "<Alt-BS>", '"_c', { desc = "Delete selected text" })
-map({ "x" }, "<C-p>", '"0p', { desc = "Paste text without copying selection" })
-
--- map({ "n" }, "<C-S-F>", ":Spectre :initial_mode='insert'<cr>", { desc = "Global search" })
--- map({ "i" }, "<C-S-F>", "<esc>:Spectre :initial_mode='insert'<cr>", { desc = "Global search" })
-
-map({ "n" }, "<C-F>", ":SearchBoxMatchAll show_matches=true<cr>", { desc = "Search in Buffer" })
-map({ "x" }, "<C-f>", "<esc>:SearchBoxMatchAll show_matches=true<cr>", { desc = "Search in Buffer" })
-map({ "n" }, "<C-r>", ":SearchBoxReplace show_matches=true confirm=menu<cr>", { desc = "Search & Replace in Buffer" })
--- map(
---   { "x" },
---   "<C-r>",
---   "<esc>:SearchBoxReplace show_matches=true confirm=menu<cr>",
---   { desc = "Search & Replace in Buffer" }
--- )
-map({ "i", "v", "n", "s" }, "<C-s>", "<cmd>wa<cr><esc>", { desc = "Save modified files" })
-map({ "i", "v", "n", "s" }, "<C-d>", "<esc>Yp", { desc = "Copy line down" })
-map({ "n" }, "U", "<cmd>redo<cr>", { desc = "Redo last change", noremap = true })
-
--- Buffman enhancements
-function removePathFromFullPath(fullPath, pathToRemove)
-  -- Replace backslashes with forward slashes for platform independence
-  fullPath = fullPath:gsub("\\", "/")
-  pathToRemove = pathToRemove:gsub("\\", "/")
-
-  -- Normalize paths by removing trailing slashes
-  fullPath = fullPath:gsub("/$", "")
-  pathToRemove = pathToRemove:gsub("/$", "")
-
-  local fullPathLen = #fullPath
-  local pathToRemoveLen = #pathToRemove
-
-  local i = 1
-  while i <= fullPathLen and i <= pathToRemoveLen do
-    if fullPath:sub(i, i) == pathToRemove:sub(i, i) then
-      i = i + 1
-    else
-      break
-    end
-  end
-
-  if i > pathToRemoveLen then
-    -- Remove pathToRemove and any leading slash
-    return fullPath:sub(i + 1)
-  else
-    return fullPath
-  end
-end
-
--- Function to open the buffer list window in order of usage with the first and second buffers swapped
-function OpenBufferListWindow()
-  -- Use vim.fn.execute to capture the output of ":ls t"
-  local buffer_list = vim.fn.execute("ls t")
-
-  -- Split the buffer list into lines
-  local buf_names = vim.split(buffer_list, "\n")
-
-  -- Remove the first line (header)
-  table.remove(buf_names, 1)
-
-  -- Check if there are at least two buffers
-  if #buf_names >= 2 then
-    -- Swap the first and second buffers
-    local temp = buf_names[1]
-    buf_names[1] = buf_names[2]
-    buf_names[2] = temp
-  end
-
-  local cwdpath = vim.fn.getcwd():gsub("%~", vim.fn.expand("$HOME")):gsub("\\", "/")
-
-  local path1 = cwdpath
-  local path2 = ""
-
-  -- Extract the buffer names within double quotes
-  local buffer_names = {}
-  for _, line in ipairs(buf_names) do
-    local name = line:match('"([^"]+)"')
-    local buf_number = line:match("([%d]+)")
-    if name then
-      local myname = name:gsub("%~", vim.fn.expand("$HOME")):gsub("\\", "/")
-
-      path2 = myname
-
-      -- print(path1, path2)
-
-      local remainingPath = removePathFromFullPath(path2, path1)
-      -- print(remainingPath)
-
-      table.insert(buffer_names, buf_number .. "\t " .. remainingPath)
-    end
-  end
-
-  vim.ui.select(buffer_names, {
-    prompt = "Navigate to a Buffer",
-  }, function(selected)
-    if selected ~= "" and selected ~= nil then
-      local buf_number = selected:match("([%d]+)")
-      vim.cmd("buffer " .. buf_number)
-    end
-  end)
-end
-
--- Set the keybinding to toggle the buffer list window
-vim.api.nvim_set_keymap(
-  "n",
+map({ "i", "n", "x" }, "<Alt-BS>", '"_c', { desc = "Delete selected text", noremap = true, silent = true })
+map({ "x" }, "<C-p>", '"0p', { desc = "Paste text without copying selection", noremap = true, silent = true })
+map(
+  { "n", "i" },
   "<C-Tab>",
-  "<Cmd>lua OpenBufferListWindow()<CR>",
-  { noremap = true, silent = true, desc = "Open Buffer List Window" }
+  ":lua require('telescope.builtin').buffers({sort_lastused=true,ignore_current_buffer=true})<cr>",
+  { desc = "Open Buffer", noremap = true, silent = true }
 )
+map({ "n", "i" }, "<C-S-F>", "<cmd>Telescope live_grep<cr>", { desc = "Global search", noremap = true, silent = true })
 map(
-  { "i" },
-  "<C-Tab>",
-  "<esc><cmd>lua OpenBufferListWindow()<cr>",
-  { noremap = true, silent = true, desc = "Open Buffer List Window" }
+  { "i", "v", "n", "s" },
+  "<C-s>",
+  "<cmd>wa<cr><esc>",
+  { desc = "Save modified files", noremap = true, silent = true }
 )
+map({ "n" }, "<Leader>bd", "<cmd>bd<cr>", { desc = "Close buffer", noremap = true, silent = true })
+map({ "n" }, "U", "<cmd>redo<cr>", { desc = "Redo last change", noremap = true })
diff --git a/lua/config/lazy.lua b/lua/config/lazy.lua
index 2b005bd..8b20271 100644
--- a/lua/config/lazy.lua
+++ b/lua/config/lazy.lua
@@ -1,46 +1,37 @@
 local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
+
 if not vim.loop.fs_stat(lazypath) then
-  -- bootstrap lazy.nvim
-  -- stylua: ignore
-  vim.fn.system({ "git", "clone", "--filter=blob:none", "https://github.com/folke/lazy.nvim.git", "--branch=stable", lazypath })
+  vim.fn.system({
+    "git",
+    "clone",
+    "--filter=blob:none",
+    "https://github.com/folke/lazy.nvim.git",
+    "--branch=stable", -- latest stable release
+    lazypath,
+  })
 end
 vim.opt.rtp:prepend(vim.env.LAZY or lazypath)
 
-require("lazy").setup({
-  spec = {
-    -- add LazyVim and import its plugins
-    { "LazyVim/LazyVim", import = "lazyvim.plugins" },
-    -- import any extras modules here
-    { import = "lazyvim.plugins.extras.formatting.prettier" },
-    { import = "lazyvim.plugins.extras.util.project" },
-    { import = "lazyvim.plugins.extras.lang.typescript" },
-    -- { import = "lazyvim.plugins.extras.lang.json" },
-    -- { import = "lazyvim.plugins.extras.ui.mini-animate" },
-    { import = "lazyvim.plugins.extras.lang.tailwind" },
-    { import = "lazyvim.plugins.extras.linting.eslint" },
-    { import = "lazyvim.plugins.extras.lsp.none-ls" },
-    -- import/override with your plugins
-    { import = "plugins" },
+require("lazy").setup({ import = "plugins" }, {
+  install = {
+    missing = true,
+    colorscheme = { "kanagawa" },
+  },
+  checker = {
+    enabled = true,
+    notify = false,
+  },
+  change_detection = {
+    enabled = true,
+    notify = false,
   },
-  defaults = {
-    -- By default, only LazyVim plugins will be lazy-loaded. Your custom plugins will load during startup.
-    -- If you know what you're doing, you can set this to `true` to have all your custom plugins lazy-loaded by default.
-    lazy = false,
-    -- It's recommended to leave version=false for now, since a lot the plugin that support versioning,
-    -- have outdated releases, which may break your Neovim install.
-    version = false, -- always use the latest git commit
-    -- version = "*", -- try installing the latest stable version for plugins that support semver
+  ui = {
+    border = "rounded",
   },
-  install = { colorscheme = { "tokyonight", "habamax" } },
-  checker = { enabled = true }, -- automatically check for plugin updates
   performance = {
     rtp = {
-      -- disable some rtp plugins
       disabled_plugins = {
         "gzip",
-        -- "matchit",
-        -- "matchparen",
-        -- "netrwPlugin",
         "tarPlugin",
         "tohtml",
         "tutor",
diff --git a/lua/config/options.lua b/lua/config/options.lua
index 7c5f4bc..b7ad655 100644
--- a/lua/config/options.lua
+++ b/lua/config/options.lua
@@ -1,24 +1,62 @@
--- Options are automatically loaded before lazy.nvim startup
--- Default options that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/options.lua
--- Add any additional options here
-
 local vim = vim
 local opt = vim.opt
+vim.g.mapleader = " " -- change leader to a space
+vim.g.maplocalleader = " " -- change localleader to a space
 
--- Enable mouse movements
-opt.mousemoveevent = true
+vim.g.loaded_netrw = 1 -- disable netrw
+vim.g.loaded_netrwPlugin = 1 --  disable netrw
 
--- Wrap lines and indent
-opt.linebreak = true
-opt.wrap = true
+opt.mousemoveevent = true -- Enable mouse movem
+opt.linebreak = true -- wrap lines and in
+opt.incsearch = true -- make search act like search in modern brow
+opt.backup = false -- creates a backup
+opt.clipboard = "unnamedplus" -- allows neovim to access the system clipboard
+opt.cmdheight = 1 -- more space in the neovim command line for displaying messages
+opt.completeopt = { "menuone", "noselect" } -- mostly just for cmp
+opt.conceallevel = 0 -- so that `` is visible in markdown files
+opt.fileencoding = "utf-8" -- the encoding written to a file
+opt.hlsearch = true -- highlight all matches on previous search pattern
+opt.ignorecase = true -- ignore case in search patterns
+opt.mouse = "a" -- allow the mouse to be used in neovim
+opt.pumheight = 10 -- pop up menu height
+opt.showmode = false -- we don't need to see things like -- INSERT -- anymore
+opt.showtabline = 0 -- always show tabs
+opt.smartcase = true -- smart case
+opt.smartindent = true -- make indenting smarter again
+opt.splitbelow = true -- force all horizontal splits to go below current window
+opt.splitright = true -- force all vertical splits to go to the right of current window
+opt.swapfile = false -- creates a swapfile
+opt.termguicolors = true -- set term gui colors (most terminals support this)
+opt.timeoutlen = 1000 -- time to wait for a mapped sequence to complete (in milliseconds)
+opt.undofile = true -- enable persistent undo
+opt.updatetime = 100 -- faster completion (4000ms default)
+opt.writebackup = false -- if a file is being edited by another program (or was written to file while editing with another program), it is not allowed to be edited
+opt.expandtab = true -- convert tabs to spaces
+opt.shiftwidth = 2 -- the number of spaces inserted for each indentation
+opt.cursorline = false -- highlight the current line
+opt.number = true -- set numbered lines
+opt.breakindent = true -- wrap lines with indent
+opt.relativenumber = false -- set relative numbered lines
+opt.numberwidth = 4 -- set number column width to 2 {default 4}
+opt.signcolumn = "yes" -- always show the sign column, otherwise it would shift the text each time
+opt.wrap = true -- display lines as one long line
+opt.scrolloff = 8 -- Makes sure there are always eight lines of context
 opt.showbreak = "↳ "
-opt.breakindent = true
+opt.sidescrolloff = 8 -- Makes sure there are always eight lines of context
+opt.showcmd = false -- Don't show the command in the last line
+opt.ruler = false -- Don't show the ruler
+opt.guifont = "VictorMono Nerd Font,Hack Nerd Font:h16" -- the font used in graphical neovim applications
+opt.title = true -- set the title of window to the value of the titlestring
+opt.confirm = true -- confirm to save changes before exiting modified buffer
+opt.fillchars = { eob = " " } -- change the character at the end of buffer
+
+-- vim.opt.cursorlineopt = "number"              -- set the cursorline
+-- vim.opt.tabstop = 2                           -- insert 2 spaces for a tab
+-- vim.opt.laststatus = 0                          -- Always display the status line
 
 opt.winblend = 30
 opt.pumblend = 30
-
 opt.winbar = "%=%m %f"
-opt.relativenumber = false
 opt.termguicolors = true
 opt.guicursor =
   "n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor,sm:block-blinkwait175-blinkoff150-blinkon175"
@@ -33,5 +71,3 @@ vim.api.nvim_create_autocmd("BufWritePre", {
   command = "silent! EslintFixAll",
   group = vim.api.nvim_create_augroup("MyAutocmdsJavaScripFormatting", {}),
 })
-opt.title = true
--- opt.titlestring = [[%f %h%m%r%w %{v:progname} (%{tabpagenr()} of %{tabpagenr('$')})]]
diff --git a/lua/config/utils.lua b/lua/config/utils.lua
new file mode 100644
index 0000000..8893aad
--- /dev/null
+++ b/lua/config/utils.lua
@@ -0,0 +1,83 @@
+local M = {}
+
+M.telescope_git_or_file = function()
+  local path = vim.fn.expand("%:p:h")
+  local git_dir = vim.fn.finddir(".git", path .. ";")
+  if #git_dir > 0 then
+    require("telescope.builtin").git_files()
+  else
+    require("telescope.builtin").find_files()
+  end
+end
+
+M.toggle_set_color_column = function()
+  if vim.wo.colorcolumn == "" then
+    vim.wo.colorcolumn = "80"
+  else
+    vim.wo.colorcolumn = ""
+  end
+end
+
+M.toggle_cursor_line = function()
+  if vim.wo.cursorline then
+    vim.wo.cursorline = false
+  else
+    vim.wo.cursorline = true
+  end
+end
+
+M.toggle_go_test = function()
+  -- Get the current buffer's file name
+  local current_file = vim.fn.expand("%:p")
+  if string.match(current_file, "_test.go$") then
+    -- If the current file ends with '_test.go', try to find the corresponding non-test file
+    local non_test_file = string.gsub(current_file, "_test.go$", ".go")
+    if vim.fn.filereadable(non_test_file) == 1 then
+      -- Open the corresponding non-test file if it exists
+      vim.cmd.edit(non_test_file)
+    else
+      print("No corresponding non-test file found")
+    end
+  else
+    -- If the current file is a non-test file, try to find the corresponding test file
+    local test_file = string.gsub(current_file, ".go$", "_test.go")
+    if vim.fn.filereadable(test_file) == 1 then
+      -- Open the corresponding test file if it exists
+      vim.cmd.edit(test_file)
+    else
+      print("No corresponding test file found")
+    end
+  end
+end
+
+-- Copy the current file path and line number to the clipboard, use GitHub URL if in a Git repository
+M.copyFilePathAndLineNumber = function()
+  local current_file = vim.fn.expand("%:p")
+  local current_line = vim.fn.line(".")
+  local is_git_repo = vim.fn.system("git rev-parse --is-inside-work-tree"):match("true")
+
+  if is_git_repo then
+    local current_repo = vim.fn.systemlist("git remote get-url origin")[1]
+    local current_branch = vim.fn.systemlist("git rev-parse --abbrev-ref HEAD")[1]
+
+    -- Convert Git URL to GitHub web URL format
+    current_repo = current_repo:gsub("git@github.com:", "https://github.com/")
+    current_repo = current_repo:gsub("%.git$", "")
+
+    -- Remove leading system path to repository root
+    local repo_root = vim.fn.systemlist("git rev-parse --show-toplevel")[1]
+    if repo_root then
+      current_file = current_file:sub(#repo_root + 2)
+    end
+
+    local url = string.format("%s/blob/%s/%s#L%s", current_repo, current_branch, current_file, current_line)
+    vim.fn.setreg("+", url)
+    print("Copied to clipboard: " .. url)
+  else
+    -- If not in a Git directory, copy the full file path
+    vim.fn.setreg("+", current_file .. "#L" .. current_line)
+    print("Copied full path to clipboard: " .. current_file .. "#L" .. current_line)
+  end
+end
+
+return M
diff --git a/lua/config/which-key/defaults.lua b/lua/config/which-key/defaults.lua
new file mode 100644
index 0000000..8f5979e
--- /dev/null
+++ b/lua/config/which-key/defaults.lua
@@ -0,0 +1,150 @@
+return {
+  mode = { "n", "v" },
+  [";"] = { ":Alpha<CR>", "Dashboard" },
+  w = { ":w!<CR>", "Save" },
+  q = { ":confirm q<CR>", "Quit" },
+  -- h = { ":nohlsearch<CR>", "No Highlight" },
+  -- p = { require("telescope.builtin").lsp_document_symbols, "Document Symbols" },
+  -- P = { require("telescope.builtin").lsp_dynamic_workspace_symbols, "Workspace Symbols" },
+  f = { require("config.utils").telescope_git_or_file, "Find Files (Root)" },
+  v = "Go to definition in a split",
+  a = "Swap next param",
+  A = "Swap previous param",
+  b = {
+    name = "Buffers",
+    d = { "<cmd>bd<cr>", "Close buffer" },
+    o = { require("telescope.builtin").buffers, "Open Buffer" },
+  },
+  W = { "<cmd>noautocmd w<cr>", "Save without formatting (noautocmd)" },
+  u = {
+    name = "UI",
+    v = { require("config.utils").toggle_set_color_column, "Toggle Color Line" },
+    c = { require("config.utils").toggle_cursor_line, "Toggle Cursor Line" },
+  },
+  i = {
+    name = "Sessions",
+    s = { "<cmd>lua require('persistence').load()<cr>", "Load Session" },
+    l = { "<cmd>lua require('persistence').load({ last = true })<cr>", "Load Last Session" },
+    d = { "<cmd>lua require('persistence').stop()<cr>", "Stop Persistence" },
+  },
+  r = {
+    name = "Replace (Spectre)",
+    r = { "<cmd>lua require('spectre').open()<cr>", "Replace" },
+    w = { "<cmd>lua require('spectre').open_visual({select_word=true})<cr>", "Replace Word" },
+    f = { "<cmd>lua require('spectre').open_file_search()<cr>", "Replace Buffer" },
+  },
+  G = {
+    name = "+Git",
+    k = { "<cmd>lua require 'gitsigns'.prev_hunk({navigation_message = false})<cr>", "Prev Hunk" },
+    l = { "<cmd>lua require 'gitsigns'.blame_line()<cr>", "Blame" },
+    p = { "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", "Preview Hunk" },
+    r = { "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", "Reset Hunk" },
+    R = { "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", "Reset Buffer" },
+    j = { "<cmd>lua require 'gitsigns'.next_hunk({navigation_message = false})<cr>", "Next Hunk" },
+    s = { "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", "Stage Hunk" },
+    u = {
+      "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",
+      "Undo Stage Hunk",
+    },
+    o = { require("telescope.builtin").git_status, "Open changed file" },
+    b = { require("telescope.builtin").git_branches, "Checkout branch" },
+    c = { require("telescope.builtin").git_commits, "Checkout commit" },
+    C = {
+      require("telescope.builtin").git_bcommits,
+      "Checkout commit(for current file)",
+    },
+    d = {
+      "<cmd>Gitsigns diffthis HEAD<cr>",
+      "Git Diff",
+    },
+    U = { ":UndotreeToggle<CR>", "Toggle UndoTree" },
+  },
+  l = {
+    name = "+LSP",
+    a = { vim.lsp.buf.code_action, "Code Action" },
+    A = { vim.lsp.buf.range_code_action, "Range Code Actions" },
+    s = { vim.lsp.buf.signature_help, "Display Signature Information" },
+    r = { vim.lsp.buf.rename, "Rename all references" },
+    f = { vim.lsp.buf.format, "Format" },
+    i = { require("telescope.builtin").lsp_implementations, "Implementation" },
+    l = { "<cmd>TroubleToggle document_diagnostics<cr>", "Document Diagnostics (Trouble)" },
+    L = { "<cmd>TroubleToggle workspace_diagnostics<cr>", "Workspace Diagnostics (Trouble)" },
+    w = { require("telescope.builtin").diagnostics, "Diagnostics" },
+    -- t = { require("telescope").extensions.refactoring.refactors, "Refactor" },
+    c = { require("config.utils").copyFilePathAndLineNumber, "Copy File Path and Line Number" },
+
+    W = {
+      name = "+Workspace",
+      a = { vim.lsp.buf.add_workspace_folder, "Add Folder" },
+      r = { vim.lsp.buf.remove_workspace_folder, "Remove Folder" },
+      l = {
+        function()
+          print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
+        end,
+        "List Folders",
+      },
+    },
+  },
+  s = {
+    name = "+Search",
+    f = { "<cmd>Telescope find_files<cr>", "Find File (CWD)" },
+    h = { "<cmd>Telescope help_tags<cr>", "Find Help" },
+    H = { "<cmd>Telescope highlights<cr>", "Find highlight groups" },
+    M = { "<cmd>Telescope man_pages<cr>", "Man Pages" },
+    o = { "<cmd>Telescope oldfiles<cr>", "Open Recent File" },
+    R = { "<cmd>Telescope registers<cr>", "Registers" },
+    t = { "<cmd>Telescope live_grep<cr>", "Live Grep" },
+    T = { "<cmd>Telescope grep_string<cr>", "Grep String" },
+    k = { "<cmd>Telescope keymaps<cr>", "Keymaps" },
+    C = { "<cmd>Telescope commands<cr>", "Commands" },
+    l = { "<cmd>Telescope resume<cr>", "Resume last search" },
+    c = { "<cmd>Telescope git_commits<cr>", "Git commits" },
+    B = { "<cmd>Telescope git_branches<cr>", "Git branches" },
+    m = { "<cmd>Telescope git_status<cr>", "Git status" },
+    S = { "<cmd>Telescope git_stash<cr>", "Git stash" },
+    e = { "<cmd>Telescope frecency<cr>", "Frecency" },
+    b = { "<cmd>Telescope buffers<cr>", "Buffers" },
+    d = {
+      name = "+DAP",
+      c = { "<cmd>Telescope dap commands<cr>", "Dap Commands" },
+      b = { "<cmd>Telescope dap list_breakpoints<cr>", "Dap Breakpoints" },
+      g = { "<cmd>Telescope dap configurations<cr>", "Dap Configurations" },
+      v = { "<cmd>Telescope dap variables<cr>", "Dap Variables" },
+      f = { "<cmd>Telescope dap frames<cr>", "Dap Frames" },
+    },
+    N = {
+      function()
+        require("telescope.builtin").find_files({ cwd = vim.fn.stdpath("config") })
+      end,
+      "Search Neovim Config",
+    },
+  },
+  T = {
+    name = "+Todo",
+    t = { "<cmd>TodoTelescope<cr>", "Todo" },
+    T = { "<cmd>TodoTelescope keywords=TODO,FIX,FIXME<cr>", "Todo/Fix/Fixme" },
+    x = { "<cmd>TodoTrouble<cr>", "Todo (Trouble)" },
+    X = { "<cmd>TodoTrouble keywords=TODO,FIX,FIXME<cr><cr>", "Todo/Fix/Fixme (Trouble)" },
+  },
+  d = {
+    name = "Debug",
+    b = { require("dap").toggle_breakpoint, "Breakpoint" },
+    c = { require("dap").continue, "Continue" },
+    i = { require("dap").step_into, "Into" },
+    o = { require("dap").step_over, "Over" },
+    O = { require("dap").step_out, "Out" },
+    r = { require("dap").repl.toggle, "Repl" },
+    l = { require("dap").run_last, "Last" },
+    u = { require("dapui").toggle, "UI" },
+    x = { require("dap").terminate, "Exit" },
+  },
+  n = {
+    name = "+Neogen",
+    g = { "<cmd>lua require('neogen').generate()<cr>", "Generate Annotatin" },
+    f = { "<cmd>lua require('neogen').generate({ type = 'func' })<cr>", "Generate Function Annotation" },
+    t = { "<cmd>lua require('neogen').generate({ type = 'type' })<cr>", "Generate Type Annotation" },
+  },
+  t = {
+    name = "+Tests",
+  },
+}
diff --git a/lua/config/which-key/non_leader.lua b/lua/config/which-key/non_leader.lua
new file mode 100644
index 0000000..584a4c5
--- /dev/null
+++ b/lua/config/which-key/non_leader.lua
@@ -0,0 +1,8 @@
+return {
+  gd = "Goto definition",
+  gD = "Goto declaration",
+  gi = "Goto implementation",
+  gl = "Goto float diagnostics",
+  go = "Goto type definition",
+  gr = "Goto references",
+}
diff --git a/lua/plugins/alfa-nvim.lua b/lua/plugins/alfa-nvim.lua
new file mode 100644
index 0000000..7402a5f
--- /dev/null
+++ b/lua/plugins/alfa-nvim.lua
@@ -0,0 +1,73 @@
+return {
+  "goolord/alpha-nvim",
+  enabled = true,
+  event = "VimEnter",
+  lazy = true,
+  opts = function()
+    local dashboard = require("alpha.themes.dashboard")
+    local logo = [[
+███╗   ██╗███████╗ ██████╗ ██╗   ██╗██╗███╗   ███╗
+████╗  ██║██╔════╝██╔═══██╗██║   ██║██║████╗ ████║
+██╔██╗ ██║█████╗  ██║   ██║██║   ██║██║██╔████╔██║
+██║╚██╗██║██╔══╝  ██║   ██║╚██╗ ██╔╝██║██║╚██╔╝██║
+██║ ╚████║███████╗╚██████╔╝ ╚████╔╝ ██║██║ ╚═╝ ██║
+╚═╝  ╚═══╝╚══════╝ ╚═════╝   ╚═══╝  ╚═╝╚═╝     ╚═╝
+    ]]
+
+    -- local logo = [[
+    --                                                 
+    --          ████ ██████           █████      ██
+    --         ███████████             █████ 
+    --         █████████ ███████████████████ ███   ███████████
+    --        █████████  ███    █████████████ █████ ██████████████
+    --       █████████ ██████████ █████████ █████ █████ ████ █████
+    --     ███████████ ███    ███ █████████ █████ █████ ████ █████
+    --    ██████  █████████████████████ ████ █████ █████ ████ ██████
+    -- ]]
+
+    dashboard.section.header.val = vim.split(logo, "\n")
+    dashboard.section.buttons.val = {
+      dashboard.button("f", " " .. " Find file", ":Telescope find_files <CR>"),
+      dashboard.button("n", " " .. " New file", ":ene <BAR> startinsert <CR>"),
+      dashboard.button("r", " " .. " Recent files", ":Telescope oldfiles <CR>"),
+      dashboard.button("g", " " .. " Find text", ":Telescope live_grep <CR>"),
+      dashboard.button("s", " " .. "Restore Session", '<cmd>lua require("persistence").load()<cr>'),
+      dashboard.button("c", " " .. " Config", ":e ~/.config/nvim/ <CR>"),
+      dashboard.button("l", "󰒲 " .. " Lazy", ":Lazy<CR>"),
+      dashboard.button("q", " " .. " Quit", ":qa<CR>"),
+    }
+    for _, button in ipairs(dashboard.section.buttons.val) do
+      button.opts.hl = "AlphaButtons"
+      button.opts.hl_shortcut = "AlphaShortcut"
+    end
+    dashboard.section.header.opts.hl = "AlphaHeader"
+    dashboard.section.buttons.opts.hl = "AlphaButtons"
+    dashboard.section.footer.opts.hl = "AlphaFooter"
+    dashboard.opts.layout[1].val = 8
+    return dashboard
+  end,
+  config = function(_, dashboard)
+    -- close Lazy and re-open when the dashboard is ready
+    if vim.o.filetype == "lazy" then
+      vim.cmd.close()
+      vim.api.nvim_create_autocmd("User", {
+        pattern = "AlphaReady",
+        callback = function()
+          require("lazy").show()
+        end,
+      })
+    end
+
+    require("alpha").setup(dashboard.opts)
+
+    vim.api.nvim_create_autocmd("User", {
+      pattern = "LazyVimStarted",
+      callback = function()
+        local stats = require("lazy").stats()
+        local ms = (math.floor(stats.startuptime * 100 + 0.5) / 100)
+        dashboard.section.footer.val = "⚡ Neovim loaded " .. stats.count .. " plugins in " .. ms .. "ms"
+        pcall(vim.cmd.AlphaRedraw)
+      end,
+    })
+  end,
+}
diff --git a/lua/plugins/auto-session.lua b/lua/plugins/auto-session.lua
new file mode 100644
index 0000000..e502e2c
--- /dev/null
+++ b/lua/plugins/auto-session.lua
@@ -0,0 +1,24 @@
+return {
+  "rmagatti/auto-session",
+  config = function()
+    local auto_session = require("auto-session")
+
+    auto_session.setup({
+      auto_session_enabled = false,
+      auto_session_enable_last_session = false,
+      auto_session_suppress_dirs = { "~/", "~/Dev", "~/Downloads", "~/Documents", "~/Desktop/" },
+      post_restore_cmds = function()
+        local buffer_list = vim.fn.execute("ls t")
+        local buf_names = vim.split(buffer_list, "\n")
+        if #buf_names == 0 then
+          vim.cmd([[Alpha]])
+        end
+      end,
+    })
+
+    local keymap = vim.keymap
+
+    keymap.set("n", "<leader>wr", "<cmd>SessionRestore<CR>", { desc = "Restore session for cwd" })
+    keymap.set("n", "<leader>ws", "<cmd>SessionSave<CR>", { desc = "Save session for auto session root dir" })
+  end,
+}
diff --git a/lua/plugins/autopairs.lua b/lua/plugins/autopairs.lua
new file mode 100644
index 0000000..d38345c
--- /dev/null
+++ b/lua/plugins/autopairs.lua
@@ -0,0 +1,31 @@
+return {
+  "windwp/nvim-autopairs",
+  event = { "InsertEnter" },
+  dependencies = {
+    "hrsh7th/nvim-cmp",
+  },
+  config = function()
+    -- import nvim-autopairs
+    local autopairs = require("nvim-autopairs")
+
+    -- configure
+    autopairs.setup({
+      check_ts = true,  -- enable treesitter
+      ts_config = {
+        lua = { "string" }, -- don't add pairs in lua string treesitter nodes
+        javascript = { "template_string" },  -- don't add pairs in javascript template_string treesitter nodes
+        java = false, -- don't check treesitter on java
+      },
+    })
+
+    -- import nvim-autopairs completion functionality
+    local cmp_autopairs = require("nvim-autopairs.completion.cmp")
+
+    -- import nvim-cmp plugin (completions plugin)
+    local cmp = require("cmp")
+
+    -- make autopairs and completion work together
+    cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done())
+
+  end,
+}
diff --git a/lua/plugins/bufferline.lua b/lua/plugins/bufferline.lua
deleted file mode 100644
index 1650249..0000000
--- a/lua/plugins/bufferline.lua
+++ /dev/null
@@ -1,28 +0,0 @@
-return {
-  "akinsho/bufferline.nvim",
-  enabled = false,
-  -- version = "*",
-  -- event = "VeryLazy",
-  -- keys = {
-  --   { "<leader>bp", "<Cmd>BufferLineTogglePin<CR>", desc = "Toggle pin" },
-  --   { "<leader>bP", "<Cmd>BufferLineGroupClose ungrouped<CR>", desc = "Delete non-pinned buffers" },
-  -- },
-  -- opts = {
-  --   options = {
-  --     diagnostics = false,
-  --     separator_style = "thin", -- slant, padded_slant, slope, padded_slope, thick, thin, or custom list
-  --     indicator = {
-  --       style = "underline",
-  --     },
-  --     hover = {
-  --       enabled = true,
-  --       delay = 50,
-  --       reveal = { "close" },
-  --     },
-  --     always_show_bufferline = true,
-  --     highlights = {
-  --       tab_separator = { fg = "#000000" },
-  --     },
-  --   },
-  -- },
-}
diff --git a/lua/plugins/cmp.lua b/lua/plugins/cmp.lua
new file mode 100644
index 0000000..a6a446c
--- /dev/null
+++ b/lua/plugins/cmp.lua
@@ -0,0 +1,135 @@
+return {
+  -- Autocompletion
+  "hrsh7th/nvim-cmp",
+  event = "InsertEnter",
+  dependencies = {
+    -- Snippet Engine & its associated nvim-cmp source
+    "L3MON4D3/LuaSnip",
+    "saadparwaiz1/cmp_luasnip",
+
+    -- Adds LSP completion capabilities
+    "hrsh7th/cmp-nvim-lsp",
+    "hrsh7th/cmp-path",
+
+    -- Adds a number of user-friendly snippets
+    "rafamadriz/friendly-snippets",
+
+    -- Adds vscode-like pictograms
+    "onsails/lspkind.nvim",
+  },
+  config = function()
+    local cmp = require("cmp")
+    local luasnip = require("luasnip")
+    -- local lspkind = require("lspkind")
+
+    local kind_icons = {
+      Text = "",
+      Method = "󰆧",
+      Function = "󰊕",
+      Constructor = "",
+      Field = "󰇽",
+      Variable = "󰂡",
+      Class = "󰠱",
+      Interface = "",
+      Module = "",
+      Property = "󰜢",
+      Unit = "",
+      Value = "󰎠",
+      Enum = "",
+      Keyword = "󰌋",
+      Snippet = "",
+      Color = "󰏘",
+      File = "󰈙",
+      Reference = "",
+      Folder = "󰉋",
+      EnumMember = "",
+      Constant = "󰏿",
+      Struct = "",
+      Event = "",
+      Operator = "󰆕",
+      TypeParameter = "󰅲",
+    }
+    require("luasnip.loaders.from_vscode").lazy_load()
+    luasnip.config.setup({})
+
+    cmp.setup({
+      snippet = {
+        expand = function(args)
+          luasnip.lsp_expand(args.body)
+        end,
+      },
+      completion = {
+        completeopt = "menu,menuone,noinsert",
+      },
+      mapping = cmp.mapping.preset.insert({
+        ["<C-n>"] = cmp.mapping.select_next_item(),
+        ["<C-p>"] = cmp.mapping.select_prev_item(),
+        ["<C-b>"] = cmp.mapping.scroll_docs(-4),
+        ["<C-f>"] = cmp.mapping.scroll_docs(4),
+        ["<C-Space>"] = cmp.mapping.complete({}),
+        ["<C-y>"] = cmp.mapping.confirm({ select = true }),
+        ["<CR>"] = cmp.mapping.confirm({
+          behavior = cmp.ConfirmBehavior.Replace,
+          select = true,
+        }),
+        ["<Tab>"] = cmp.mapping(function(fallback)
+          if cmp.visible() then
+            cmp.select_next_item()
+          elseif luasnip.expand_or_locally_jumpable() then
+            luasnip.expand_or_jump()
+          else
+            fallback()
+          end
+        end, { "i", "s" }),
+        ["<S-Tab>"] = cmp.mapping(function(fallback)
+          if cmp.visible() then
+            cmp.select_prev_item()
+          elseif luasnip.locally_jumpable(-1) then
+            luasnip.jump(-1)
+          else
+            fallback()
+          end
+        end, { "i", "s" }),
+      }),
+      window = {
+        completion = cmp.config.window.bordered(),
+        documentation = cmp.config.window.bordered(),
+      },
+      sources = {
+        { name = "copilot" },
+        { name = "nvim_lsp" },
+        { name = "nvim_lua" },
+        { name = "luasnip" },
+        { name = "buffer" },
+        { name = "path" },
+        { name = "calc" },
+        { name = "emoji" },
+        { name = "treesitter" },
+        { name = "crates" },
+        { name = "tmux" },
+      },
+      formatting = {
+        format = function(entry, vim_item)
+          local lspkind_ok, lspkind = pcall(require, "lspkind")
+          if not lspkind_ok then
+            -- From kind_icons array
+            vim_item.kind = string.format("%s %s", kind_icons[vim_item.kind], vim_item.kind)
+            -- Source
+            vim_item.menu = ({
+              copilot = "[Copilot]",
+              nvim_lsp = "[LSP]",
+              nvim_lua = "[Lua]",
+              luasnip = "[LuaSnip]",
+              buffer = "[Buffer]",
+              latex_symbols = "[LaTeX]",
+            })[entry.source.name]
+            return vim_item
+          else
+            -- From lspkind
+            return lspkind.cmp_format()(entry, vim_item)
+          end
+        end,
+      },
+    })
+  end,
+}
diff --git a/lua/plugins/colorscheme.lua b/lua/plugins/colorscheme.lua
index cc32901..62cf8db 100644
--- a/lua/plugins/colorscheme.lua
+++ b/lua/plugins/colorscheme.lua
@@ -1,40 +1,490 @@
 return {
   {
-    -- { "catppuccin/nvim", name = "catppuccin", priority = 1000, lazy = false },
-    -- { "patstockwell/vim-monokai-tasty", lazy = false },
-    -- { "oxfist/night-owl.nvim", lazy = false },
-    -- { "hachy/eva01.vim", lazy = false },
-    -- { "ChristianChiarulli/onedark.nvim", lazy = false },
-    -- { "MannyFay/mannydark.nvim", lazy = false },
-    -- { "antonyz89/electron-vue.nvim", lazy = false, dependencies = { "rktjmp/lush.nvim" } },
-    -- { "cosmicthemethhead/ultradark.nvim", lazy = false },
-    { "rebelot/kanagawa.nvim", lazy = false },
-    -- { "rafamadriz/themes.nvim", lazy = false },
-    -- { "tersetears/maani.nvim", lazy = false, dependencies = { "rktjmp/lush.nvim" } },
-    -- {
-    --   "folke/tokyonight.nvim",
-    --   lazy = false,
-    --   priority = 1000,
-    -- },
-    -- { "UtkarshVerma/molokai.nvim", lazy = false, priority = 1000 },
-    -- {
-    --   "neanias/everforest-nvim",
-    --   version = false,
-    --   lazy = false,
-    --   priority = 1000, -- make sure to load this before all the other start plugins
-    --   -- Optional; default configuration will be used if setup isn't called.
-    --   config = function()
-    --     require("everforest").setup({
-    --       -- Your config here
-    --     })
-    --   end,
-    -- },
-    -- { "lunarvim/Onedarker.nvim" },
-  },
-  {
-    "LazyVim/LazyVim",
-    opts = {
-      colorscheme = "kanagawa",
-    },
+    "rebelot/kanagawa.nvim",
+    lazy = false,
+    priority = 1000,
+    config = function()
+      require("kanagawa").setup({
+        transparent = true,
+        dimInactive = true,
+        terminalColors = true,
+        overrides = function(colors)
+          return {
+            IlluminatedWordText = { bg = colors.palette.fujiGray },
+            IlluminatedWordRead = { bg = colors.palette.fujiGray },
+            IlluminatedWordWrite = { bg = colors.palette.fujiGray },
+          }
+        end,
+      })
+      vim.cmd.colorscheme("kanagawa")
+    end,
   },
+  -- {
+  --   "catppuccin/nvim",
+  --   priority = 150,
+  --   enabled = false,
+  --   name = "catppuccin",
+  --   config = function()
+  --     require("catppuccin").setup({
+  --
+  --       transparent_background = false, -- disables setting the background color.
+  --       integrations = {
+  --         which_key = true,
+  --         cmp = true,
+  --         gitsigns = true,
+  --         treesitter = true,
+  --         notify = false,
+  --         telescope = {
+  --           enabled = true,
+  --           style = "nvchad",
+  --         },
+  --       },
+  --   background = {
+  --     light = "latte",
+  --     dark = "mocha",
+  --   },
+  --   color_overrides = {
+  --     latte = {
+  --       rosewater = "#c14a4a",
+  --       flamingo = "#c14a4a",
+  --       red = "#c14a4a",
+  --       maroon = "#c14a4a",
+  --       pink = "#945e80",
+  --       mauve = "#945e80",
+  --       peach = "#c35e0a",
+  --       yellow = "#b47109",
+  --       green = "#6c782e",
+  --       teal = "#4c7a5d",
+  --       sky = "#4c7a5d",
+  --       sapphire = "#4c7a5d",
+  --       blue = "#45707a",
+  --       lavender = "#45707a",
+  --       text = "#654735",
+  --       subtext1 = "#73503c",
+  --       subtext0 = "#805942",
+  --       overlay2 = "#8c6249",
+  --       overlay1 = "#8c856d",
+  --       overlay0 = "#a69d81",
+  --       surface2 = "#bfb695",
+  --       surface1 = "#d1c7a3",
+  --       surface0 = "#e3dec3",
+  --       base = "#f9f5d7",
+  --       mantle = "#f0ebce",
+  --       crust = "#e8e3c8",
+  --     },
+  --     mocha = {
+  --       rosewater = "#ea6962",
+  --       flamingo = "#ea6962",
+  --       red = "#ea6962",
+  --       maroon = "#ea6962",
+  --       pink = "#d3869b",
+  --       mauve = "#d3869b",
+  --       peach = "#e78a4e",
+  --       yellow = "#d8a657",
+  --       green = "#a9b665",
+  --       teal = "#89b482",
+  --       sky = "#89b482",
+  --       sapphire = "#89b482",
+  --       blue = "#7daea3",
+  --       lavender = "#7daea3",
+  --       text = "#ebdbb2",
+  --       subtext1 = "#d5c4a1",
+  --       subtext0 = "#bdae93",
+  --       overlay2 = "#a89984",
+  --       overlay1 = "#928374",
+  --       overlay0 = "#595959",
+  --       surface2 = "#4d4d4d",
+  --       surface1 = "#404040",
+  --       surface0 = "#292929",
+  --       base = "#1d2021",
+  --       mantle = "#191b1c",
+  --       crust = "#141617",
+  --     },
+  --   },
+  --   transparent_background = false,
+  --   show_end_of_buffer = false,
+  --   integration_default = false,
+  --   integrations = {
+  --     barbecue = { dim_dirname = true, bold_basename = true, dim_context = false, alt_background = false },
+  --     cmp = true,
+  --     gitsigns = true,
+  --     hop = true,
+  --     illuminate = { enabled = true },
+  --     native_lsp = { enabled = true, inlay_hints = { background = true } },
+  --     neogit = true,
+  --     neotree = true,
+  --     semantic_tokens = true,
+  --     treesitter = true,
+  --     treesitter_context = true,
+  --     vimwiki = true,
+  --     which_key = true,
+  --     aerial = true,
+  --     fidget = true,
+  --     mason = true,
+  --     neotest = true,
+  --     dap_ui = true,
+  --     telescope = {
+  --       enabled = true,
+  --       style = "nvchad",
+  --     },
+  --   },
+  --   highlight_overrides = {
+  --     all = function(colors)
+  --       return {
+  --         CmpItemMenu = { fg = colors.surface2 },
+  --         CursorLineNr = { fg = colors.text },
+  --         FloatBorder = { bg = colors.base, fg = colors.surface0 },
+  --         GitSignsChange = { fg = colors.peach },
+  --         LineNr = { fg = colors.overlay0 },
+  --         LspInfoBorder = { link = "FloatBorder" },
+  --         NeoTreeDirectoryIcon = { fg = colors.subtext1 },
+  --         NeoTreeDirectoryName = { fg = colors.subtext1 },
+  --         NeoTreeFloatBorder = { link = "TelescopeResultsBorder" },
+  --         NeoTreeGitConflict = { fg = colors.red },
+  --         NeoTreeGitDeleted = { fg = colors.red },
+  --         NeoTreeGitIgnored = { fg = colors.overlay0 },
+  --         NeoTreeGitModified = { fg = colors.peach },
+  --         NeoTreeGitStaged = { fg = colors.green },
+  --         NeoTreeGitUnstaged = { fg = colors.red },
+  --         NeoTreeGitUntracked = { fg = colors.green },
+  --         NeoTreeIndent = { fg = colors.surface1 },
+  --         NeoTreeNormal = { bg = colors.mantle },
+  --         NeoTreeNormalNC = { bg = colors.mantle },
+  --         NeoTreeRootName = { fg = colors.subtext1, style = { "bold" } },
+  --         NeoTreeTabActive = { fg = colors.text, bg = colors.mantle },
+  --         NeoTreeTabInactive = { fg = colors.surface2, bg = colors.crust },
+  --         NeoTreeTabSeparatorActive = { fg = colors.mantle, bg = colors.mantle },
+  --         NeoTreeTabSeparatorInactive = { fg = colors.crust, bg = colors.crust },
+  --         NeoTreeWinSeparator = { fg = colors.base, bg = colors.base },
+  --         NormalFloat = { bg = colors.base },
+  --         Pmenu = { bg = colors.mantle, fg = "" },
+  --         PmenuSel = { bg = colors.surface0, fg = "" },
+  --         VertSplit = { bg = colors.base, fg = colors.surface0 },
+  --         WhichKeyFloat = { bg = colors.mantle },
+  --         YankHighlight = { bg = colors.surface2 },
+  --         FidgetTask = { fg = colors.subtext1 },
+  --         FidgetTitle = { fg = colors.peach },
+  --
+  --         IblIndent = { fg = colors.surface0 },
+  --         IblScope = { fg = colors.overlay0 },
+  --
+  --         Boolean = { fg = colors.mauve },
+  --         Number = { fg = colors.mauve },
+  --         Float = { fg = colors.mauve },
+  --
+  --         PreProc = { fg = colors.mauve },
+  --         PreCondit = { fg = colors.mauve },
+  --         Include = { fg = colors.mauve },
+  --         Define = { fg = colors.mauve },
+  --         Conditional = { fg = colors.red },
+  --         Repeat = { fg = colors.red },
+  --         Keyword = { fg = colors.red },
+  --         Typedef = { fg = colors.red },
+  --         Exception = { fg = colors.red },
+  --         Statement = { fg = colors.red },
+  --
+  --         Error = { fg = colors.red },
+  --         StorageClass = { fg = colors.peach },
+  --         Tag = { fg = colors.peach },
+  --         Label = { fg = colors.peach },
+  --         Structure = { fg = colors.peach },
+  --         Operator = { fg = colors.peach },
+  --         Title = { fg = colors.peach },
+  --         Special = { fg = colors.yellow },
+  --         SpecialChar = { fg = colors.yellow },
+  --         Type = { fg = colors.yellow, style = { "bold" } },
+  --         Function = { fg = colors.green, style = { "bold" } },
+  --         Delimiter = { fg = colors.subtext1 },
+  --         Ignore = { fg = colors.subtext1 },
+  --         Macro = { fg = colors.teal },
+  --
+  --         TSAnnotation = { fg = colors.mauve },
+  --         TSAttribute = { fg = colors.mauve },
+  --         TSBoolean = { fg = colors.mauve },
+  --         TSCharacter = { fg = colors.teal },
+  --         TSCharacterSpecial = { link = "SpecialChar" },
+  --         TSComment = { link = "Comment" },
+  --         TSConditional = { fg = colors.red },
+  --         TSConstBuiltin = { fg = colors.mauve },
+  --         TSConstMacro = { fg = colors.mauve },
+  --         TSConstant = { fg = colors.text },
+  --         TSConstructor = { fg = colors.green },
+  --         TSDebug = { link = "Debug" },
+  --         TSDefine = { link = "Define" },
+  --         TSEnvironment = { link = "Macro" },
+  --         TSEnvironmentName = { link = "Type" },
+  --         TSError = { link = "Error" },
+  --         TSException = { fg = colors.red },
+  --         TSField = { fg = colors.blue },
+  --         TSFloat = { fg = colors.mauve },
+  --         TSFuncBuiltin = { fg = colors.green },
+  --         TSFuncMacro = { fg = colors.green },
+  --         TSFunction = { fg = colors.green },
+  --         TSFunctionCall = { fg = colors.green },
+  --         TSInclude = { fg = colors.red },
+  --         TSKeyword = { fg = colors.red },
+  --         TSKeywordFunction = { fg = colors.red },
+  --         TSKeywordOperator = { fg = colors.peach },
+  --         TSKeywordReturn = { fg = colors.red },
+  --         TSLabel = { fg = colors.peach },
+  --         TSLiteral = { link = "String" },
+  --         TSMath = { fg = colors.blue },
+  --         TSMethod = { fg = colors.green },
+  --         TSMethodCall = { fg = colors.green },
+  --         TSNamespace = { fg = colors.yellow },
+  --         TSNone = { fg = colors.text },
+  --         TSNumber = { fg = colors.mauve },
+  --         TSOperator = { fg = colors.peach },
+  --         TSParameter = { fg = colors.text },
+  --         TSParameterReference = { fg = colors.text },
+  --         TSPreProc = { link = "PreProc" },
+  --         TSProperty = { fg = colors.blue },
+  --         TSPunctBracket = { fg = colors.text },
+  --         TSPunctDelimiter = { link = "Delimiter" },
+  --         TSPunctSpecial = { fg = colors.blue },
+  --         TSRepeat = { fg = colors.red },
+  --         TSStorageClass = { fg = colors.peach },
+  --         TSStorageClassLifetime = { fg = colors.peach },
+  --         TSStrike = { fg = colors.subtext1 },
+  --         TSString = { fg = colors.teal },
+  --         TSStringEscape = { fg = colors.green },
+  --         TSStringRegex = { fg = colors.green },
+  --         TSStringSpecial = { link = "SpecialChar" },
+  --         TSSymbol = { fg = colors.text },
+  --         TSTag = { fg = colors.peach },
+  --         TSTagAttribute = { fg = colors.green },
+  --         TSTagDelimiter = { fg = colors.green },
+  --         TSText = { fg = colors.green },
+  --         TSTextReference = { link = "Constant" },
+  --         TSTitle = { link = "Title" },
+  --         TSTodo = { link = "Todo" },
+  --         TSType = { fg = colors.yellow, style = { "bold" } },
+  --         TSTypeBuiltin = { fg = colors.yellow, style = { "bold" } },
+  --         TSTypeDefinition = { fg = colors.yellow, style = { "bold" } },
+  --         TSTypeQualifier = { fg = colors.peach, style = { "bold" } },
+  --         TSURI = { fg = colors.blue },
+  --         TSVariable = { fg = colors.text },
+  --         TSVariableBuiltin = { fg = colors.mauve },
+  --
+  --         ["@annotation"] = { link = "TSAnnotation" },
+  --         ["@attribute"] = { link = "TSAttribute" },
+  --         ["@boolean"] = { link = "TSBoolean" },
+  --         ["@character"] = { link = "TSCharacter" },
+  --         ["@character.special"] = { link = "TSCharacterSpecial" },
+  --         ["@comment"] = { link = "TSComment" },
+  --         ["@conceal"] = { link = "Grey" },
+  --         ["@conditional"] = { link = "TSConditional" },
+  --         ["@constant"] = { link = "TSConstant" },
+  --         ["@constant.builtin"] = { link = "TSConstBuiltin" },
+  --         ["@constant.macro"] = { link = "TSConstMacro" },
+  --         ["@constructor"] = { link = "TSConstructor" },
+  --         ["@debug"] = { link = "TSDebug" },
+  --         ["@define"] = { link = "TSDefine" },
+  --         ["@error"] = { link = "TSError" },
+  --         ["@exception"] = { link = "TSException" },
+  --         ["@field"] = { link = "TSField" },
+  --         ["@float"] = { link = "TSFloat" },
+  --         ["@function"] = { link = "TSFunction" },
+  --         ["@function.builtin"] = { link = "TSFuncBuiltin" },
+  --         ["@function.call"] = { link = "TSFunctionCall" },
+  --         ["@function.macro"] = { link = "TSFuncMacro" },
+  --         ["@include"] = { link = "TSInclude" },
+  --         ["@keyword"] = { link = "TSKeyword" },
+  --         ["@keyword.function"] = { link = "TSKeywordFunction" },
+  --         ["@keyword.operator"] = { link = "TSKeywordOperator" },
+  --         ["@keyword.return"] = { link = "TSKeywordReturn" },
+  --         ["@label"] = { link = "TSLabel" },
+  --         ["@math"] = { link = "TSMath" },
+  --         ["@method"] = { link = "TSMethod" },
+  --         ["@method.call"] = { link = "TSMethodCall" },
+  --         ["@namespace"] = { link = "TSNamespace" },
+  --         ["@none"] = { link = "TSNone" },
+  --         ["@number"] = { link = "TSNumber" },
+  --         ["@operator"] = { link = "TSOperator" },
+  --         ["@parameter"] = { link = "TSParameter" },
+  --         ["@parameter.reference"] = { link = "TSParameterReference" },
+  --         ["@preproc"] = { link = "TSPreProc" },
+  --         ["@property"] = { link = "TSProperty" },
+  --         ["@punctuation.bracket"] = { link = "TSPunctBracket" },
+  --         ["@punctuation.delimiter"] = { link = "TSPunctDelimiter" },
+  --         ["@punctuation.special"] = { link = "TSPunctSpecial" },
+  --         ["@repeat"] = { link = "TSRepeat" },
+  --         ["@storageclass"] = { link = "TSStorageClass" },
+  --         ["@storageclass.lifetime"] = { link = "TSStorageClassLifetime" },
+  --         ["@strike"] = { link = "TSStrike" },
+  --         ["@string"] = { link = "TSString" },
+  --         ["@string.escape"] = { link = "TSStringEscape" },
+  --         ["@string.regex"] = { link = "TSStringRegex" },
+  --         ["@string.special"] = { link = "TSStringSpecial" },
+  --         ["@symbol"] = { link = "TSSymbol" },
+  --         ["@tag"] = { link = "TSTag" },
+  --         ["@tag.attribute"] = { link = "TSTagAttribute" },
+  --         ["@tag.delimiter"] = { link = "TSTagDelimiter" },
+  --         ["@text"] = { link = "TSText" },
+  --         ["@text.danger"] = { link = "TSDanger" },
+  --         ["@text.diff.add"] = { link = "diffAdded" },
+  --         ["@text.diff.delete"] = { link = "diffRemoved" },
+  --         ["@text.emphasis"] = { link = "TSEmphasis" },
+  --         ["@text.environment"] = { link = "TSEnvironment" },
+  --         ["@text.environment.name"] = { link = "TSEnvironmentName" },
+  --         ["@text.literal"] = { link = "TSLiteral" },
+  --         ["@text.math"] = { link = "TSMath" },
+  --         ["@text.note"] = { link = "TSNote" },
+  --         ["@text.reference"] = { link = "TSTextReference" },
+  --         ["@text.strike"] = { link = "TSStrike" },
+  --         ["@text.strong"] = { link = "TSStrong" },
+  --         ["@text.title"] = { link = "TSTitle" },
+  --         ["@text.todo"] = { link = "TSTodo" },
+  --         ["@text.todo.checked"] = { link = "Green" },
+  --         ["@text.todo.unchecked"] = { link = "Ignore" },
+  --         ["@text.underline"] = { link = "TSUnderline" },
+  --         ["@text.uri"] = { link = "TSURI" },
+  --         ["@text.warning"] = { link = "TSWarning" },
+  --         ["@todo"] = { link = "TSTodo" },
+  --         ["@type"] = { link = "TSType" },
+  --         ["@type.builtin"] = { link = "TSTypeBuiltin" },
+  --         ["@type.definition"] = { link = "TSTypeDefinition" },
+  --         ["@type.qualifier"] = { link = "TSTypeQualifier" },
+  --         ["@uri"] = { link = "TSURI" },
+  --         ["@variable"] = { link = "TSVariable" },
+  --         ["@variable.builtin"] = { link = "TSVariableBuiltin" },
+  --
+  --         ["@lsp.type.class"] = { link = "TSType" },
+  --         ["@lsp.type.comment"] = { link = "TSComment" },
+  --         ["@lsp.type.decorator"] = { link = "TSFunction" },
+  --         ["@lsp.type.enum"] = { link = "TSType" },
+  --         ["@lsp.type.enumMember"] = { link = "TSProperty" },
+  --         ["@lsp.type.events"] = { link = "TSLabel" },
+  --         ["@lsp.type.function"] = { link = "TSFunction" },
+  --         ["@lsp.type.interface"] = { link = "TSType" },
+  --         ["@lsp.type.keyword"] = { link = "TSKeyword" },
+  --         ["@lsp.type.macro"] = { link = "TSConstMacro" },
+  --         ["@lsp.type.method"] = { link = "TSMethod" },
+  --         ["@lsp.type.modifier"] = { link = "TSTypeQualifier" },
+  --         ["@lsp.type.namespace"] = { link = "TSNamespace" },
+  --         ["@lsp.type.number"] = { link = "TSNumber" },
+  --         ["@lsp.type.operator"] = { link = "TSOperator" },
+  --         ["@lsp.type.parameter"] = { link = "TSParameter" },
+  --         ["@lsp.type.property"] = { link = "TSProperty" },
+  --         ["@lsp.type.regexp"] = { link = "TSStringRegex" },
+  --         ["@lsp.type.string"] = { link = "TSString" },
+  --         ["@lsp.type.struct"] = { link = "TSType" },
+  --         ["@lsp.type.type"] = { link = "TSType" },
+  --         ["@lsp.type.typeParameter"] = { link = "TSTypeDefinition" },
+  --         ["@lsp.type.variable"] = { link = "TSVariable" },
+  --       }
+  --     end,
+  --     latte = function(colors)
+  --       return {
+  --         IblIndent = { fg = colors.mantle },
+  --         IblScope = { fg = colors.surface1 },
+  --
+  --         LineNr = { fg = colors.surface1 },
+  --       }
+  --     end,
+  --   },
+  --     })
+  --     vim.api.nvim_set_hl(0, "NavicIconsOperator", { default = true, bg = "none", fg = "#eedaad" })
+  --     vim.api.nvim_set_hl(0, "NavicText", { default = true, bg = "none", fg = "#eedaad" })
+  --     vim.api.nvim_set_hl(0, "NavicSeparator", { default = true, bg = "none", fg = "#eedaad" })
+  --     --
+  --     -- vim.cmd.colorscheme("catppuccin-macchiato")
+  --   end,
+  -- },
+  -- {
+  --   "sainnhe/gruvbox-material",
+  --   enabled = true,
+  --   priority = 1000,
+  --   config = function()
+  --     vim.g.gruvbox_material_transparent_background = 0
+  --     vim.g.gruvbox_material_foreground = "mix"
+  --     vim.g.gruvbox_material_background = "hard" -- soft, medium, hard
+  --     vim.g.gruvbox_material_ui_contrast = "high" -- The contrast of line numbers, indent lines, etc.
+  --     vim.g.gruvbox_material_float_style = "bright" -- Background of floating windows
+  --     vim.g.gruvbox_material_statusline_style = "material"
+  --     vim.g.gruvbox_material_cursor = "auto"
+  --
+  --     -- vim.g.gruvbox_material_colors_override = { bg0 = '#000000' } -- #0e1010
+  --     -- vim.g.gruvbox_material_colors_override = { bg0 = "#121212" }
+  --     -- vim.g.gruvbox_material_better_performance = 1
+  --
+  --     -- vim.cmd.colorscheme("gruvbox-material")
+  --   end,
+  -- },
+  -- {
+  --   "folke/tokyonight.nvim",
+  --   enabled = false,
+  --   lazy = false,
+  --   priority = 1000,
+  --   opts = {},
+  -- },
+  -- {
+  --   "LunarVim/primer.nvim",
+  --   enabled = false,
+  --   priority = 1000,
+  --   config = function()
+  --     -- vim.cmd.colorscheme 'primer_dark'
+  --   end,
+  -- },
+  -- {
+  --   "EdenEast/nightfox.nvim",
+  --   enabled = false,
+  --   config = function()
+  --     -- vim.cmd.colorscheme("rose-pine")
+  --   end,
+  -- },
+  -- {
+  --   "rose-pine/neovim",
+  --   name = "rose-pine",
+  --   enabled = false,
+  --   priority = 1000,
+  --   config = function()
+  --     require("rose-pine").setup({
+  --       -- disable_background = true,
+  --
+  --       styles = {
+  --         bold = false,
+  --         italic = false,
+  --         transparency = false,
+  --       },
+  --       highlight_groups = {
+  --         TelescopeBorder = { fg = "overlay", bg = "overlay" },
+  --         TelescopeNormal = { fg = "subtle", bg = "overlay" },
+  --         TelescopeSelection = { fg = "text", bg = "highlight_med" },
+  --         TelescopeSelectionCaret = { fg = "love", bg = "highlight_med" },
+  --         TelescopeMultiSelection = { fg = "text", bg = "highlight_high" },
+  --
+  --         TelescopeTitle = { fg = "base", bg = "love" },
+  --         TelescopePromptTitle = { fg = "base", bg = "pine" },
+  --         TelescopePreviewTitle = { fg = "base", bg = "iris" },
+  --
+  --         TelescopePromptNormal = { fg = "text", bg = "surface" },
+  --         TelescopePromptBorder = { fg = "surface", bg = "surface" },
+  --       },
+  --     })
+  --
+  --     -- vim.cmd.colorscheme("rose-pine")
+  --   end,
+  -- },
+  -- {
+  --   "oxfist/night-owl.nvim",
+  --   enabled = false,
+  --   lazy = false, -- make sure we load this during startup if it is your main colorscheme
+  --   priority = 1000, -- make sure to load this before all the other start plugins
+  --   config = function()
+  --     local night_owl = require("night-owl")
+  --
+  --     -- 👇 Add your own personal settings here
+  --     night_owl.setup({
+  --       -- These are the default settings
+  --       bold = false,
+  --       italics = false,
+  --       underline = false,
+  --       undercurl = false,
+  --     })
+  --
+  --     -- load the colorscheme here
+  --     -- vim.cmd.colorscheme("night-owl")
+  --   end,
+  -- },
 }
diff --git a/lua/plugins/conform.lua b/lua/plugins/conform.lua
index cb0f773..83d62c1 100644
--- a/lua/plugins/conform.lua
+++ b/lua/plugins/conform.lua
@@ -1,46 +1,39 @@
 return {
   "stevearc/conform.nvim",
   event = { "BufReadPre", "BufNewFile" },
-  opts = {
-    formatters_by_ft = {
-      javascript = { "eslint_d", "prettier" },
-      typescript = { "prettier" },
-      javascriptreact = { "prettier" },
-      typescriptreact = { "prettier" },
-      svelte = { "prettier" },
-      css = { "prettier" },
-      html = { "prettier" },
-      json = { "prettier" },
-      yaml = { "prettier" },
-      markdown = { "prettier" },
-      graphql = { "prettier" },
-      lua = { "stylua" },
-      python = { "isort", "black" },
-    },
-    -- format_on_save = {
-    --   lsp_fallback = true,
-    --   async = false,
-    --   timeout_ms = 1000,
-    -- },
-  },
-  keys = {
-    {
-      "<leader>cp",
-      function()
-        local conform = require("conform")
-        conform.format({ lsp_fallback = true, async = false, timeout_ms = 1000 })
-      end,
-      mode = { "n", "v" },
-      { desc = "Format file or range (in visual mode)" },
-    },
-    -- {
-    --   "<leader>cp",
-    --   function()
-    --     local conform = require("conform")
-    --     conform.format({ lsp_fallback = true, async = false, timeout_ms = 1000 })
-    --   end,
-    --   mode = "v",
-    --   { desc = "Format file or range (in visual mode)" },
-    -- },
-  },
+  config = function()
+    local conform = require("conform")
+
+    conform.setup({
+      formatters_by_ft = {
+        javascript = { "prettier" },
+        typescript = { "prettier" },
+        javascriptreact = { "prettier" },
+        typescriptreact = { "prettier" },
+        svelte = { "prettier" },
+        css = { "prettier" },
+        html = { "prettier" },
+        json = { "prettier" },
+        yaml = { "prettier" },
+        markdown = { "prettier" },
+        graphql = { "prettier" },
+        liquid = { "prettier" },
+        lua = { "stylua" },
+        vue = { "prettier" },
+      },
+      format_on_save = {
+        lsp_fallback = true,
+        async = false,
+        timeout_ms = 1000,
+      },
+    })
+
+    vim.keymap.set({ "n", "v" }, "<leader>mp", function()
+      conform.format({
+        lsp_fallback = true,
+        async = false,
+        timeout_ms = 1000,
+      })
+    end, { desc = "Format file or range (in visual mode)" })
+  end,
 }
diff --git a/lua/plugins/dropbar.lua b/lua/plugins/dropbar.lua
index 9c7c370..b6b19cf 100644
--- a/lua/plugins/dropbar.lua
+++ b/lua/plugins/dropbar.lua
@@ -1 +1 @@
-return { { "Bekaboo/dropbar.nvim" } }
+return { { "Bekaboo/dropbar.nvim", dependencies = { "nvim-telescope/telescope-fzf-native.nvim" } } }
diff --git a/lua/plugins/example.lua b/lua/plugins/example.lua
deleted file mode 100644
index f84ebdc..0000000
--- a/lua/plugins/example.lua
+++ /dev/null
@@ -1,265 +0,0 @@
--- since this is just an example spec, don't actually load anything here and return an empty spec
--- stylua: ignore
-if true then return {} end
-
--- every spec file under the "plugins" directory will be loaded automatically by lazy.nvim
---
--- In your plugin files, you can:
--- * add extra plugins
--- * disable/enabled LazyVim plugins
--- * override the configuration of LazyVim plugins
-return {
-  -- add gruvbox
-  { "ellisonleao/gruvbox.nvim" },
-
-  -- Configure LazyVim to load gruvbox
-  {
-    "LazyVim/LazyVim",
-    opts = {
-      colorscheme = "gruvbox",
-    },
-  },
-
-  -- change trouble config
-  {
-    "folke/trouble.nvim",
-    -- opts will be merged with the parent spec
-    opts = { use_diagnostic_signs = true },
-  },
-
-  -- disable trouble
-  { "folke/trouble.nvim", enabled = false },
-
-  -- add symbols-outline
-  {
-    "simrat39/symbols-outline.nvim",
-    cmd = "SymbolsOutline",
-    keys = { { "<leader>cs", "<cmd>SymbolsOutline<cr>", desc = "Symbols Outline" } },
-    config = true,
-  },
-
-  -- override nvim-cmp and add cmp-emoji
-  {
-    "hrsh7th/nvim-cmp",
-    dependencies = { "hrsh7th/cmp-emoji" },
-    ---@param opts cmp.ConfigSchema
-    opts = function(_, opts)
-      table.insert(opts.sources, { name = "emoji" })
-    end,
-  },
-
-  -- change some telescope options and a keymap to browse plugin files
-  {
-    "nvim-telescope/telescope.nvim",
-    keys = {
-      -- add a keymap to browse plugin files
-      -- stylua: ignore
-      {
-        "<leader>fp",
-        function() require("telescope.builtin").find_files({ cwd = require("lazy.core.config").options.root }) end,
-        desc = "Find Plugin File",
-      },
-    },
-    -- change some options
-    opts = {
-      defaults = {
-        layout_strategy = "horizontal",
-        layout_config = { prompt_position = "top" },
-        sorting_strategy = "ascending",
-        winblend = 0,
-      },
-    },
-  },
-
-  -- add telescope-fzf-native
-  {
-    "telescope.nvim",
-    dependencies = {
-      "nvim-telescope/telescope-fzf-native.nvim",
-      build = "make",
-      config = function()
-        require("telescope").load_extension("fzf")
-      end,
-    },
-  },
-
-  -- add pyright to lspconfig
-  {
-    "neovim/nvim-lspconfig",
-    ---@class PluginLspOpts
-    opts = {
-      ---@type lspconfig.options
-      servers = {
-        -- pyright will be automatically installed with mason and loaded with lspconfig
-        pyright = {},
-      },
-    },
-  },
-
-  -- add tsserver and setup with typescript.nvim instead of lspconfig
-  {
-    "neovim/nvim-lspconfig",
-    dependencies = {
-      "jose-elias-alvarez/typescript.nvim",
-      init = function()
-        require("lazyvim.util").on_attach(function(_, buffer)
-          -- stylua: ignore
-          vim.keymap.set( "n", "<leader>co", "TypescriptOrganizeImports", { buffer = buffer, desc = "Organize Imports" })
-          vim.keymap.set("n", "<leader>cR", "TypescriptRenameFile", { desc = "Rename File", buffer = buffer })
-        end)
-      end,
-    },
-    ---@class PluginLspOpts
-    opts = {
-      ---@type lspconfig.options
-      servers = {
-        -- tsserver will be automatically installed with mason and loaded with lspconfig
-        tsserver = {},
-      },
-      -- you can do any additional lsp server setup here
-      -- return true if you don't want this server to be setup with lspconfig
-      ---@type table<string, fun(server:string, opts:_.lspconfig.options):boolean?>
-      setup = {
-        -- example to setup with typescript.nvim
-        tsserver = function(_, opts)
-          require("typescript").setup({ server = opts })
-          return true
-        end,
-        -- Specify * to use this function as a fallback for any server
-        -- ["*"] = function(server, opts) end,
-      },
-    },
-  },
-
-  -- for typescript, LazyVim also includes extra specs to properly setup lspconfig,
-  -- treesitter, mason and typescript.nvim. So instead of the above, you can use:
-  { import = "lazyvim.plugins.extras.lang.typescript" },
-
-  -- add more treesitter parsers
-  {
-    "nvim-treesitter/nvim-treesitter",
-    opts = {
-      ensure_installed = {
-        "bash",
-        "html",
-        "javascript",
-        "json",
-        "lua",
-        "markdown",
-        "markdown_inline",
-        "python",
-        "query",
-        "regex",
-        "tsx",
-        "typescript",
-        "vim",
-        "yaml",
-      },
-    },
-  },
-
-  -- since `vim.tbl_deep_extend`, can only merge tables and not lists, the code above
-  -- would overwrite `ensure_installed` with the new value.
-  -- If you'd rather extend the default config, use the code below instead:
-  {
-    "nvim-treesitter/nvim-treesitter",
-    opts = function(_, opts)
-      -- add tsx and treesitter
-      vim.list_extend(opts.ensure_installed, {
-        "tsx",
-        "typescript",
-      })
-    end,
-  },
-
-  -- the opts function can also be used to change the default opts:
-  {
-    "nvim-lualine/lualine.nvim",
-    event = "VeryLazy",
-    opts = function(_, opts)
-      table.insert(opts.sections.lualine_x, "😄")
-    end,
-  },
-
-  -- or you can return new options to override all the defaults
-  {
-    "nvim-lualine/lualine.nvim",
-    event = "VeryLazy",
-    opts = function()
-      return {
-        --[[add your custom lualine config here]]
-      }
-    end,
-  },
-
-  -- use mini.starter instead of alpha
-  { import = "lazyvim.plugins.extras.ui.mini-starter" },
-
-  -- add jsonls and schemastore packages, and setup treesitter for json, json5 and jsonc
-  { import = "lazyvim.plugins.extras.lang.json" },
-
-  -- add any tools you want to have installed below
-  {
-    "williamboman/mason.nvim",
-    opts = {
-      ensure_installed = {
-        "stylua",
-        "shellcheck",
-        "shfmt",
-        "flake8",
-      },
-    },
-  },
-
-  -- Use <tab> for completion and snippets (supertab)
-  -- first: disable default <tab> and <s-tab> behavior in LuaSnip
-  {
-    "L3MON4D3/LuaSnip",
-    keys = function()
-      return {}
-    end,
-  },
-  -- then: setup supertab in cmp
-  {
-    "hrsh7th/nvim-cmp",
-    dependencies = {
-      "hrsh7th/cmp-emoji",
-    },
-    ---@param opts cmp.ConfigSchema
-    opts = function(_, opts)
-      local has_words_before = function()
-        unpack = unpack or table.unpack
-        local line, col = unpack(vim.api.nvim_win_get_cursor(0))
-        return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
-      end
-
-      local luasnip = require("luasnip")
-      local cmp = require("cmp")
-
-      opts.mapping = vim.tbl_extend("force", opts.mapping, {
-        ["<Tab>"] = cmp.mapping(function(fallback)
-          if cmp.visible() then
-            cmp.select_next_item()
-            -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable()
-            -- this way you will only jump inside the snippet region
-          elseif luasnip.expand_or_jumpable() then
-            luasnip.expand_or_jump()
-          elseif has_words_before() then
-            cmp.complete()
-          else
-            fallback()
-          end
-        end, { "i", "s" }),
-        ["<S-Tab>"] = cmp.mapping(function(fallback)
-          if cmp.visible() then
-            cmp.select_prev_item()
-          elseif luasnip.jumpable(-1) then
-            luasnip.jump(-1)
-          else
-            fallback()
-          end
-        end, { "i", "s" }),
-      })
-    end,
-  },
-}
diff --git a/lua/plugins/extra.lua b/lua/plugins/extra.lua
new file mode 100644
index 0000000..6913d48
--- /dev/null
+++ b/lua/plugins/extra.lua
@@ -0,0 +1,388 @@
+return {
+  -- Autotags
+  {
+    "windwp/nvim-ts-autotag",
+    opts = {},
+  },
+
+  -- delete buffer
+  {
+    "famiu/bufdelete.nvim",
+    event = "VeryLazy",
+    config = function()
+      vim.keymap.set(
+        "n",
+        "Q",
+        ":lua require('bufdelete').bufdelete(0, false)<cr>",
+        { noremap = true, silent = true, desc = "Delete buffer" }
+      )
+    end,
+  },
+
+  -- comments
+  {
+    "numToStr/Comment.nvim",
+    opts = {},
+    lazy = false,
+  },
+  -- useful when there are embedded languages in certain types of files (e.g. Vue or React)
+  { "joosepalviste/nvim-ts-context-commentstring", lazy = true },
+
+  -- Neovim plugin to improve the default vim.ui interfaces
+  {
+    "stevearc/dressing.nvim",
+    dependencies = { "MunifTanjim/nui.nvim" },
+    opts = {},
+    config = function()
+      require("dressing").setup()
+    end,
+  },
+
+  -- Neovim notifications and LSP progress messages
+  {
+    "j-hui/fidget.nvim",
+    branch = "legacy",
+    enabled = false,
+    config = function()
+      require("fidget").setup({
+        window = { blend = 0 },
+      })
+    end,
+  },
+
+  -- Smooth scrolling neovim plugin written in lua
+  {
+    "karb94/neoscroll.nvim",
+    config = function()
+      require("neoscroll").setup({
+        stop_eof = true,
+        easing_function = "sine",
+        hide_cursor = true,
+        cursor_scrolls_alone = true,
+      })
+    end,
+  },
+
+  -- find and replace
+  {
+    "windwp/nvim-spectre",
+    event = "BufRead",
+    -- dependencies = {
+    --   "nvim-lua/plenary.nvim",
+    -- },
+    -- keys = {
+    --   {
+    --     "<C-S-&>",
+    --     '<cmd>lua require("spectre").open_visual({select_word=true,is_insert_mode=true,live_update=true})<CR>',
+    --     desc = "Global Search",
+    --   },
+    -- },
+    opts = {
+      is_insert_mode = true,
+      select_word = true,
+      live_update = true,
+      lnum_for_results = true,
+      color_devicons = true,
+      default = { find = { options = {} } },
+    },
+  },
+
+  -- Add/change/delete surrounding delimiter pairs with ease
+  {
+    "kylechui/nvim-surround",
+    version = "*",
+    event = "VeryLazy",
+    config = function()
+      require("nvim-surround").setup()
+    end,
+  },
+
+  -- Heuristically set buffer options
+  {
+    "tpope/vim-sleuth",
+  },
+
+  -- Neovim setup for init.lua and plugin development with full signature help, docs and completion for the nvim lua API
+  {
+    "folke/neodev.nvim",
+    config = function()
+      require("neodev").setup({
+        library = { plugins = { "neotest" }, types = true },
+      })
+    end,
+  },
+
+  -- Neovim Lua plugin to automatically manage character pairs. Part of 'mini.nvim' library.
+  {
+    "echasnovski/mini.pairs",
+    event = "VeryLazy",
+    config = function(_, opts)
+      require("mini.pairs").setup(opts)
+    end,
+  },
+  -- {
+  --   "echasnovski/mini.cursorword",
+  --   event = "VeryLazy",
+  --   config = function(_, opts)
+  --     require("mini.cursorword").setup(opts)
+  --   end,
+  -- },
+  {
+    "RRethy/vim-illuminate",
+    -- enabled = false,
+    event = { "BufReadPost", "BufNewFile" },
+    opts = {
+      filetypes_denylist = {
+        "mason",
+        "harpoon",
+        "neo-tree",
+        "DressingInput",
+        "NeogitCommitMessage",
+        "qf",
+        "dirvish",
+        "fugitive",
+        "alpha",
+        "NvimTree",
+        "lazy",
+        "Trouble",
+        "netrw",
+        "lir",
+        "DiffviewFiles",
+        "Outline",
+        "Jaq",
+        "spectre_panel",
+        "toggleterm",
+        "DressingSelect",
+        "TelescopePrompt",
+      },
+      min_count_to_highlight = 2,
+    },
+    lazy = false,
+    config = function(_, opts)
+      require("illuminate").configure(opts)
+
+      local function map(key, dir, buffer)
+        vim.keymap.set("n", key, function()
+          require("illuminate")["goto_" .. dir .. "_reference"](false)
+        end, { desc = dir:sub(1, 1):upper() .. dir:sub(2) .. " Reference", buffer = buffer })
+      end
+
+      map("]w", "next")
+      map("[w", "prev")
+
+      vim.api.nvim_create_autocmd("FileType", {
+        callback = function()
+          local buffer = vim.api.nvim_get_current_buf()
+          map("]]", "next", buffer)
+          map("[[", "prev", buffer)
+        end,
+      })
+
+      vim.api.nvim_set_hl(0, "IlluminatedWordText", { link = "Visual" })
+      vim.api.nvim_set_hl(0, "IlluminatedWordRead", { link = "Visual" })
+      vim.api.nvim_set_hl(0, "IlluminatedWordWrite", { link = "Visual" })
+
+      vim.api.nvim_create_autocmd({ "ColorScheme" }, {
+        pattern = { "*" },
+        callback = function(_)
+          vim.api.nvim_set_hl(0, "IlluminatedWordText", { link = "Visual" })
+          vim.api.nvim_set_hl(0, "IlluminatedWordRead", { link = "Visual" })
+          vim.api.nvim_set_hl(0, "IlluminatedWordWrite", { link = "Visual" })
+        end,
+      })
+    end,
+    keys = {
+      { "]w", desc = "Next Reference" },
+      { "[w", desc = "Prev Reference" },
+    },
+  },
+
+  -- Lorem Ipsum generator for Neovim
+  {
+    "derektata/lorem.nvim",
+    enabled = false,
+    config = function()
+      local lorem = require("lorem")
+      lorem.setup({
+        sentenceLength = "mixedShort",
+        comma = 1,
+      })
+    end,
+  },
+
+  -- Indent guide for Neovim
+  {
+    "lukas-reineke/indent-blankline.nvim",
+    event = { "BufReadPost", "BufNewFile" },
+    enabled = false,
+    version = "2.1.0",
+    opts = {
+      char = "┊",
+      -- char = "│",
+      filetype_exclude = { "help", "alpha", "dashboard", "neo-tree", "Trouble", "lazy" },
+      show_trailing_blankline_indent = false,
+      show_current_context = false,
+    },
+  },
+
+  -- editor config support
+  {
+    "editorconfig/editorconfig-vim",
+  },
+
+  -- Enhanced f/t motions for Leap
+  {
+    "ggandor/flit.nvim",
+    keys = function()
+      ---@type LazyKeys[]
+      local ret = {}
+      for _, key in ipairs({ "f", "F", "t", "T" }) do
+        ret[#ret + 1] = { key, mode = { "n", "x", "o" }, desc = key }
+      end
+      return ret
+    end,
+    opts = { labeled_modes = "nx" },
+  },
+  -- mouse replacement
+  {
+    "ggandor/leap.nvim",
+    keys = {
+      { "s", mode = { "n", "x", "o" }, desc = "Leap forward to" },
+      { "S", mode = { "n", "x", "o" }, desc = "Leap backward to" },
+      { "gs", mode = { "n", "x", "o" }, desc = "Leap from windows" },
+    },
+    config = function(_, opts)
+      local leap = require("leap")
+      for k, v in pairs(opts) do
+        leap.opts[k] = v
+      end
+      leap.add_default_mappings(true)
+      vim.keymap.del({ "x", "o" }, "x")
+      vim.keymap.del({ "x", "o" }, "X")
+    end,
+  },
+
+  -- breadcrumbs
+  {
+    "LunarVim/breadcrumbs.nvim",
+    config = function()
+      require("breadcrumbs").setup()
+    end,
+  },
+  -- Simple winbar/statusline plugin that shows your current code context
+  {
+    "SmiteshP/nvim-navic",
+    config = function()
+      local icons = require("config.icons")
+      require("nvim-navic").setup({
+        highlight = true,
+        lsp = {
+          auto_attach = true,
+          preference = { "typescript-tools" },
+        },
+        click = true,
+        separator = " " .. icons.ui.ChevronRight .. " ",
+        depth_limit = 0,
+        depth_limit_indicator = "..",
+        icons = {
+          File = " ",
+          Module = " ",
+          Namespace = " ",
+          Package = " ",
+          Class = " ",
+          Method = " ",
+          Property = " ",
+          Field = " ",
+          Constructor = " ",
+          Enum = " ",
+          Interface = " ",
+          Function = " ",
+          Variable = " ",
+          Constant = " ",
+          String = " ",
+          Number = " ",
+          Boolean = " ",
+          Array = " ",
+          Object = " ",
+          Key = " ",
+          Null = " ",
+          EnumMember = " ",
+          Struct = " ",
+          Event = " ",
+          Operator = " ",
+          TypeParameter = " ",
+        },
+      })
+    end,
+  },
+
+  -- persist sessions
+  {
+    "folke/persistence.nvim",
+    dependencies = { "lukas-reineke/indent-blankline.nvim" },
+    event = "BufReadPre", -- this will only start session saving when an actual file was opened
+    opts = {},
+  },
+
+  -- better code annotation
+  {
+    "danymat/neogen",
+    dependencies = {
+      "nvim-treesitter/nvim-treesitter",
+      "L3MON4D3/LuaSnip",
+    },
+    config = function()
+      local neogen = require("neogen")
+
+      neogen.setup({
+        snippet_engine = "luasnip",
+      })
+    end,
+    -- version = "*"
+  },
+
+  {
+    "ThePrimeagen/refactoring.nvim",
+    enabled = false,
+    dependencies = {
+      { "nvim-lua/plenary.nvim" },
+      { "nvim-treesitter/nvim-treesitter" },
+    },
+    config = function()
+      require("refactoring").setup({})
+    end,
+  },
+
+  {
+    "echasnovski/mini.statusline",
+    enabled = false,
+    version = "*",
+    config = function()
+      vim.cmd("highlight MiniStatuslineFilename guifg=#C7D3F8 guibg=#1E2032")
+
+      local statusline = require("mini.statusline")
+
+      statusline.setup({
+        use_icons = vim.g.have_nerd_font,
+      })
+
+      local mode, mode_hl = statusline.section_mode({ trunc_width = 120 })
+      local git = statusline.section_git({ trunc_width = 75 })
+      local diagnostics = statusline.section_diagnostics({ trunc_width = 75 })
+      local filename = statusline.section_filename({ trunc_width = 140 })
+      local fileinfo = statusline.section_fileinfo({ trunc_width = 120 })
+      local location = statusline.section_location({ trunc_width = 75 })
+      local search = statusline.section_searchcount({ trunc_width = 75 })
+
+      statusline.combine_groups({
+        { hl = mode_hl, strings = { mode } },
+        { hl = "MiniStatuslineDevinfo", strings = { git, diagnostics } },
+        "%<", -- Mark general truncate point
+        { hl = "MiniStatuslineFilename", strings = { filename } },
+        "%=", -- End left alignment
+        { hl = "MiniStatuslineFileinfo", strings = { fileinfo } },
+        { hl = mode_hl, strings = { search, location } },
+      })
+    end,
+  },
+}
diff --git a/lua/plugins/fold-preview.lua b/lua/plugins/fold-preview.lua
deleted file mode 100644
index ee46786..0000000
--- a/lua/plugins/fold-preview.lua
+++ /dev/null
@@ -1,12 +0,0 @@
-return {
-  {
-    "anuvyklack/fold-preview.nvim",
-    dependencies = { "anuvyklack/keymap-amend.nvim" },
-    opts = {
-      {
-        -- Your configuration goes here.
-        auto = true,
-      },
-    },
-  },
-}
diff --git a/lua/plugins/git-signs.lua b/lua/plugins/git-signs.lua
index b9c41e3..0121bac 100644
--- a/lua/plugins/git-signs.lua
+++ b/lua/plugins/git-signs.lua
@@ -1,15 +1,97 @@
 return {
   {
     "lewis6991/gitsigns.nvim",
+    lazy = false,
     event = { "BufReadPre", "BufNewFile" },
-    opts = {
-      current_line_blame = true,
-      current_line_blame_opts = { delay = 400 },
-      numhl = true,
-      -- linehl = true,
-      signcolumn = false,
-      word_diff = true,
-      watch_gitdir = { follow_files = true },
-    },
+    config = function()
+      local icons = require("config.icons")
+      require("gitsigns").setup({
+        signs = {
+          add = {
+            hl = "GitSignsAdd",
+            text = icons.ui.BoldLineLeft,
+            numhl = "GitSignsAddNr",
+            linehl = "GitSignsAddLn",
+          },
+          change = {
+            hl = "GitSignsChange",
+            text = icons.ui.BoldLineLeft,
+            numhl = "GitSignsChangeNr",
+            linehl = "GitSignsChangeLn",
+          },
+          delete = {
+            hl = "GitSignsDelete",
+            text = icons.ui.TriangleShortArrowRight,
+            numhl = "GitSignsDeleteNr",
+            linehl = "GitSignsDeleteLn",
+          },
+          topdelete = {
+            hl = "GitSignsDelete",
+            text = icons.ui.TriangleShortArrowRight,
+            numhl = "GitSignsDeleteNr",
+            linehl = "GitSignsDeleteLn",
+          },
+          changedelete = {
+            hl = "GitSignsChange",
+            text = icons.ui.BoldLineLeft,
+            numhl = "GitSignsChangeNr",
+            linehl = "GitSignsChangeLn",
+          },
+        },
+        signcolumn = true,
+        numhl = false,
+        linehl = false,
+        word_diff = false,
+        watch_gitdir = {
+          interval = 1000,
+          follow_files = true,
+        },
+        attach_to_untracked = true,
+        current_line_blame = true, -- Toggle with `:Gitsigns toggle_current_line_blame`
+        current_line_blame_opts = {
+          virt_text = true,
+          virt_text_pos = "eol", -- 'eol' | 'overlay' | 'right_align'
+          delay = 400,
+          ignore_whitespace = false,
+        },
+        current_line_blame_formatter = "<author>, <author_time:%Y-%m-%d> - <summary>",
+        sign_priority = 6,
+        status_formatter = nil,
+        update_debounce = 200,
+        max_file_length = 40000,
+        preview_config = {
+          border = "rounded",
+          style = "minimal",
+          relative = "cursor",
+          row = 0,
+          col = 1,
+        },
+        yadm = { enable = false },
+
+        on_attach = function(bufnr)
+          vim.keymap.set(
+            "n",
+            "<leader>H",
+            require("gitsigns").preview_hunk,
+            { buffer = bufnr, desc = "Preview git hunk" }
+          )
+
+          vim.keymap.set("n", "]]", require("gitsigns").next_hunk, { buffer = bufnr, desc = "Next git hunk" })
+
+          vim.keymap.set("n", "[[", require("gitsigns").prev_hunk, { buffer = bufnr, desc = "Previous git hunk" })
+        end,
+      })
+    end,
   },
+  {
+    "sindrets/diffview.nvim",
+    event = "VeryLazy",
+    cmd = { "DiffviewOpen", "DiffviewClose", "DiffviewToggleFiles", "DiffviewFocusFiles" },
+  },
+  -- Git related plugins
+  "tpope/vim-fugitive",
+  "tpope/vim-rhubarb",
+
+  -- not git, but it's okay
+  "mbbill/undotree",
 }
diff --git a/lua/plugins/indent-blankline.lua b/lua/plugins/indent-blankline.lua
index ccfacf2..5bcb22e 100644
--- a/lua/plugins/indent-blankline.lua
+++ b/lua/plugins/indent-blankline.lua
@@ -1 +1,7 @@
-return { "lukas-reineke/indent-blankline.nvim", enabled = false, main = "ibl", opts = {} }
+return {
+  "lukas-reineke/indent-blankline.nvim",
+  main = "ibl",
+  opts = {
+    indent = { char = "┊" },
+  },
+}
diff --git a/lua/plugins/lsp.lua b/lua/plugins/lsp.lua
new file mode 100644
index 0000000..72be761
--- /dev/null
+++ b/lua/plugins/lsp.lua
@@ -0,0 +1,109 @@
+return {
+  "neovim/nvim-lspconfig",
+  event = { "BufReadPre", "BufNewFile" },
+  dependencies = {
+    { "williamboman/mason.nvim", config = true },
+    "williamboman/mason-lspconfig.nvim",
+    { "j-hui/fidget.nvim", opts = {} },
+    "folke/neodev.nvim",
+    { "b0o/schemastore.nvim" },
+    { "hrsh7th/cmp-nvim-lsp" },
+  },
+  config = function()
+    require("mason").setup({
+      ui = {
+        border = "rounded",
+        icons = {
+          package_installed = "✓",
+          package_pending = "➜",
+          package_uninstalled = "✗",
+        },
+      },
+    })
+    require("mason-lspconfig").setup({
+      ensure_installed = vim.tbl_keys(require("plugins.lsp.servers")),
+    })
+    require("lspconfig.ui.windows").default_options.border = "single"
+
+    require("neodev").setup()
+
+    vim.api.nvim_create_autocmd("LspAttach", {
+      group = vim.api.nvim_create_augroup("kickstart-lsp-attach", { clear = true }),
+      callback = function(event)
+        local map = function(keys, func, desc)
+          vim.keymap.set("n", keys, func, { buffer = event.buf, desc = "LSP: " .. desc })
+        end
+
+        map("gd", require("telescope.builtin").lsp_definitions, "Goto Definition")
+        map("gr", require("telescope.builtin").lsp_references, "Goto References")
+        map("gi", require("telescope.builtin").lsp_implementations, "Goto Implementation")
+        map("go", require("telescope.builtin").lsp_type_definitions, "Type Definition")
+        map("<leader>p", require("telescope.builtin").lsp_document_symbols, "Document Symbols")
+        map("<leader>P", require("telescope.builtin").lsp_workspace_symbols, "Workspace Symbols")
+        map("<leader>Ps", require("telescope.builtin").lsp_dynamic_workspace_symbols, "Workspace Symbols")
+
+        map("gl", vim.diagnostic.open_float, "Open Diagnostic Float")
+        map("K", vim.lsp.buf.hover, "Hover Documentation")
+        map("gs", vim.lsp.buf.signature_help, "Signature Documentation")
+        map("gD", vim.lsp.buf.declaration, "Goto Declaration")
+
+        map("<leader>v", "<cmd>vsplit | lua vim.lsp.buf.definition()<cr>", "Goto Definition in Vertical Split")
+
+        -- Thank you teej
+        -- https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua#L502
+        local client = vim.lsp.get_client_by_id(event.data.client_id)
+        if client and client.server_capabilities.documentHighlightProvider then
+          vim.api.nvim_create_autocmd({ "CursorHold", "CursorHoldI" }, {
+            buffer = event.buf,
+            callback = vim.lsp.buf.document_highlight,
+          })
+
+          vim.api.nvim_create_autocmd({ "CursorMoved", "CursorMovedI" }, {
+            buffer = event.buf,
+            callback = vim.lsp.buf.clear_references,
+          })
+        end
+      end,
+    })
+
+    -- local capabilities = vim.lsp.protocol.make_client_capabilities()
+    -- capabilities = require("cmp_nvim_lsp").default_capabilities(capabilities)
+    local capabilities = vim.lsp.protocol.make_client_capabilities()
+    capabilities = vim.tbl_deep_extend("force", capabilities, require("cmp_nvim_lsp").default_capabilities())
+
+    local mason_lspconfig = require("mason-lspconfig")
+
+    mason_lspconfig.setup_handlers({
+      function(server_name)
+        require("lspconfig")[server_name].setup({
+          capabilities = capabilities,
+          -- on_attach = require("plugins.lsp.on_attach").on_attach,
+          settings = require("plugins.lsp.servers")[server_name],
+          filetypes = (require("plugins.lsp.servers")[server_name] or {}).filetypes,
+        })
+      end,
+    })
+
+    vim.diagnostic.config({
+      title = false,
+      underline = true,
+      virtual_text = true,
+      signs = true,
+      update_in_insert = false,
+      severity_sort = true,
+      float = {
+        source = "always",
+        style = "minimal",
+        border = "rounded",
+        header = "",
+        prefix = "",
+      },
+    })
+
+    local signs = { Error = " ", Warn = " ", Hint = "󰠠 ", Info = " " }
+    for type, icon in pairs(signs) do
+      local hl = "DiagnosticSign" .. type
+      vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
+    end
+  end,
+}
diff --git a/lua/plugins/lsp/on_attach.lua b/lua/plugins/lsp/on_attach.lua
new file mode 100644
index 0000000..5220607
--- /dev/null
+++ b/lua/plugins/lsp/on_attach.lua
@@ -0,0 +1,45 @@
+M = {}
+M.on_attach = function(_, bufnr)
+  local nmap = function(keys, func, desc)
+    if desc then
+      desc = "LSP: " .. desc
+    end
+
+    vim.keymap.set("n", keys, func, { buffer = bufnr, desc = desc })
+  end
+
+  nmap("gd", require("telescope.builtin").lsp_definitions, "Goto Definition")
+  nmap("gr", require("telescope.builtin").lsp_references, "Goto References")
+  nmap("gi", require("telescope.builtin").lsp_implementations, "Goto Implementation")
+  nmap("go", require("telescope.builtin").lsp_type_definitions, "Type Definition")
+  -- nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')
+
+  nmap("gl", vim.diagnostic.open_float, "Open Diagnostic Float")
+
+  nmap("K", vim.lsp.buf.hover, "Hover Documentation")
+  nmap("gs", vim.lsp.buf.signature_help, "Signature Documentation")
+
+  nmap("gD", vim.lsp.buf.declaration, "Goto Declaration")
+  -- nmap("<leader>Wa", vim.lsp.buf.add_workspace_folder, "Workspace Add Folder")
+  -- nmap("<leader>Wr", vim.lsp.buf.remove_workspace_folder, "Workspace Remove Folder")
+  -- nmap("<leader>Wl", function()
+  --   print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
+  -- end, "Workspace List Folders")
+
+  nmap("<leader>v", "<cmd>vsplit | lua vim.lsp.buf.definition()<cr>", "Goto Definition in Vertical Split")
+
+  -- local client = vim.lsp.get_client_by_id(event.data.client_id)
+  -- if client and client.server_capabilities.documentHighlightProvider then
+  --   vim.api.nvim_create_autocmd({ "CursorHold", "CursorHoldI" }, {
+  --     buffer = event.buf,
+  --     callback = vim.lsp.buf.document_highlight,
+  --   })
+  --
+  --   vim.api.nvim_create_autocmd({ "CursorMoved", "CursorMovedI" }, {
+  --     buffer = event.buf,
+  --     callback = vim.lsp.buf.clear_references,
+  --   })
+  -- end
+end
+
+return M
diff --git a/lua/plugins/lsp/servers.lua b/lua/plugins/lsp/servers.lua
new file mode 100644
index 0000000..3507bb4
--- /dev/null
+++ b/lua/plugins/lsp/servers.lua
@@ -0,0 +1,48 @@
+return {
+  jsonls = {
+    settings = {
+      json = {
+        schema = require("schemastore").json.schemas(),
+        validate = { enable = true },
+      },
+    },
+  },
+  lua_ls = {
+    settings = {
+      Lua = {
+        runtime = { version = "LuaJIT" },
+        workspace = {
+          checkThirdParty = false,
+          -- Tells lua_ls where to find all the Lua files that you have loaded
+          -- for your neovim configuration.
+          library = {
+            "${3rd}/luv/library",
+            unpack(vim.api.nvim_get_runtime_file("", true)),
+          },
+          -- If lua_ls is really slow on your computer, you can try this instead:
+          -- library = { vim.env.VIMRUNTIME },
+        },
+        completion = {
+          callSnippet = "Replace",
+        },
+        -- You can toggle below to ignore Lua_LS's noisy `missing-fields` warnings
+        -- diagnostics = { disable = { 'missing-fields' } },
+      },
+    },
+  },
+  bashls = {
+    filetypes = { "sh", "zsh" },
+  },
+  vimls = {
+    filetypes = { "vim" },
+  },
+  tsserver = {},
+  volar = {},
+  vue = {},
+
+  solidity_ls_nomicfoundation = {},
+  yamlls = {
+    cmd = { "yaml-language-server", "--stdio" },
+    filetypes = { "yaml" },
+  },
+}
diff --git a/lua/plugins/lspsaga.lua b/lua/plugins/lspsaga.lua
deleted file mode 100644
index 5c26b22..0000000
--- a/lua/plugins/lspsaga.lua
+++ /dev/null
@@ -1,14 +0,0 @@
-return {
-  {
-    "nvimdev/lspsaga.nvim",
-    event = "LspAttach",
-    config = function()
-      require("lspsaga").setup({})
-    end,
-    dependencies = {
-      "nvim-treesitter/nvim-treesitter",
-      "nvim-tree/nvim-web-devicons",
-    },
-    keys = { { "<C-.>", ":Lspsaga code_action<cr>", mode = { "n" }, desc = "Show code actions menu" } },
-  },
-}
diff --git a/lua/plugins/lualine.lua b/lua/plugins/lualine.lua
index 397e8d5..5fd636a 100644
--- a/lua/plugins/lualine.lua
+++ b/lua/plugins/lualine.lua
@@ -5,16 +5,55 @@ else
   icon = ""
 end
 return {
-  {
-    "nvim-lualine/lualine.nvim",
-    dependencies = { "nvim-tree/nvim-web-devicons" },
-    event = "VeryLazy",
-    opts = {
+  "nvim-lualine/lualine.nvim",
+  dependencies = {
+    "nvim-tree/nvim-web-devicons",
+    "meuter/lualine-so-fancy.nvim",
+  },
+  lazy = false,
+  event = { "BufReadPost", "BufNewFile", "VeryLazy" },
+  config = function()
+    -- local icons = require("config.icons")
+    require("lualine").setup({
       options = {
+        theme = "auto",
+        -- theme = "catppuccin",
+        globalstatus = true,
         icons_enabled = true,
-        theme = "molokai",
+        -- component_separators = { left = "│", right = "│" },
+        component_separators = { left = "|", right = "|" },
+        section_separators = { left = "", right = "" },
+        disabled_filetypes = {
+          statusline = {
+            "alfa-nvim",
+            "help",
+            "neo-tree",
+            "Trouble",
+            "spectre_panel",
+            "toggleterm",
+          },
+          winbar = {},
+        },
       },
       sections = {
+        lualine_a = {},
+        lualine_b = {
+          "fancy_branch",
+        },
+        lualine_c = {
+          {
+            "filename",
+            path = 1, -- 2 for full path
+            symbols = {
+              modified = "  ",
+              -- readonly = "  ",
+              -- unnamed = "  ",
+            },
+          },
+          { "fancy_diagnostics", sources = { "nvim_lsp" }, symbols = { error = " ", warn = " ", info = " " } },
+          { "fancy_searchcount" },
+          { require("auto-session.lib").current_session_name },
+        },
         lualine_x = {
           function()
             return require("package-info").get_status()
@@ -22,8 +61,23 @@ return {
           "encoding",
           { "fileformat", symbols = { unix = icon } },
           "filetype",
+          "fancy_lsp_servers",
+          "fancy_diff",
+          "progress",
         },
+        lualine_y = {},
+        lualine_z = {},
       },
-    },
-  },
+      inactive_sections = {
+        lualine_a = {},
+        lualine_b = {},
+        lualine_c = { "filename" },
+        -- lualine_x = { "location" },
+        lualine_y = {},
+        lualine_z = {},
+      },
+      tabline = {},
+      extensions = { "neo-tree", "lazy" },
+    })
+  end,
 }
diff --git a/lua/plugins/mason.lua b/lua/plugins/mason.lua
deleted file mode 100644
index 9c67271..0000000
--- a/lua/plugins/mason.lua
+++ /dev/null
@@ -1,30 +0,0 @@
-return {
-  "williamboman/mason.nvim",
-  dependencies = {
-    "WhoIsSethDaniel/mason-tool-installer.nvim",
-  },
-  config = function()
-    -- import mason
-    local mason = require("mason")
-
-    -- enable mason and configure icons
-    mason.setup({
-      ui = {
-        icons = {
-          package_installed = "✓",
-          package_pending = "➜",
-          package_uninstalled = "✗",
-        },
-      },
-    })
-    local mason_tool_installer = require("mason-tool-installer")
-    mason_tool_installer.setup({
-      ensure_installed = {
-        "prettier", -- prettier formatter
-        "stylua", -- lua formatter
-        "eslint-lsp", -- js linter
-        "yaml-language-server", -- handle yaml files
-      },
-    })
-  end,
-}
diff --git a/lua/plugins/mini-hipatterns.lua b/lua/plugins/mini-hipatterns.lua
deleted file mode 100644
index 704c0e6..0000000
--- a/lua/plugins/mini-hipatterns.lua
+++ /dev/null
@@ -1,29 +0,0 @@
-return {
-  {
-    "echasnovski/mini.hipatterns",
-    event = "BufReadPre",
-    opts = function()
-      local hi = require("mini.hipatterns")
-      return {
-        -- custom LazyVim option to enable the tailwind integration
-        tailwind = {
-          enabled = true,
-          ft = { "typescriptreact", "javascriptreact", "css", "javascript", "typescript", "html" },
-          -- full: the whole css class will be highlighted
-          -- compact: only the color will be highlighted
-          style = "full",
-        },
-        highlighters = {
-          -- Highlight standalone 'FIXME', 'HACK', 'TODO', 'NOTE'
-          fixme = { pattern = "%f[%w]()FIXME()%f[%W]", group = "MiniHipatternsFixme" },
-          hack = { pattern = "%f[%w]()HACK()%f[%W]", group = "MiniHipatternsHack" },
-          todo = { pattern = "%f[%w]()TODO()%f[%W]", group = "MiniHipatternsTodo" },
-          note = { pattern = "%f[%w]()NOTE()%f[%W]", group = "MiniHipatternsNote" },
-
-          -- Highlight hex color strings (`#rrggbb`) using that color
-          hex_color = hi.gen_highlighter.hex_color({ priority = 2000 }),
-        },
-      }
-    end,
-  },
-}
diff --git a/lua/plugins/neo-tree.lua b/lua/plugins/neo-tree.lua
index 6fca494..e41c523 100644
--- a/lua/plugins/neo-tree.lua
+++ b/lua/plugins/neo-tree.lua
@@ -1,23 +1,28 @@
+-- TODO
+
+-- references:
+-- https://github.com/nvim-neo-tree/neo-tree.nvim
+-- https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Recipes
 return {
   "nvim-neo-tree/neo-tree.nvim",
-  branch = "v3.x",
   dependencies = {
     "nvim-lua/plenary.nvim",
     "nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
     "MunifTanjim/nui.nvim",
-    -- "3rd/image.nvim", -- Optional image support in preview window: See `# Preview Mode` for more information
   },
+  event = "VeryLazy",
   keys = {
-    {
-      "<leader>e",
-      ":Neotree toggle reveal_force_cwd<cr>",
-      desc = "Explorer NeoTree (root dir)",
-    },
+    { "<leader>e", ":Neotree toggle float reveal_force_cwd<CR>", silent = true, desc = "Float File Explorer" },
+    { "<leader><tab>", ":Neotree toggle left reveal_force_cwd<CR>", silent = true, desc = "Left File Explorer" },
   },
   config = function()
     require("neo-tree").setup({
       reveal_force_cwd = true,
       popup_border_style = "rounded",
+      close_if_last_window = true,
+      enable_git_status = true,
+      enable_modified_markers = true,
+      enable_diagnostics = true,
       sort_case_insensitive = true,
       source_selector = {
         winbar = true, -- toggle to show selector on winbar
@@ -27,6 +32,37 @@ return {
           { source = "buffers", display_name = "  Buffers " },
         },
       },
+      default_component_configs = {
+        indent = {
+          with_markers = true,
+          with_expanders = true,
+        },
+        modified = {
+          symbol = " ",
+          highlight = "NeoTreeModified",
+        },
+        icon = {
+          folder_closed = "",
+          folder_open = "",
+          folder_empty = "",
+          folder_empty_open = "",
+        },
+        git_status = {
+          symbols = {
+            -- Change type
+            added = "",
+            deleted = "",
+            modified = "",
+            renamed = "",
+            -- Status type
+            untracked = "",
+            ignored = "",
+            unstaged = "",
+            staged = "",
+            conflict = "",
+          },
+        },
+      },
       sort_function = function(a, b)
         return a.path:lower() < b.path:lower()
       end,
@@ -39,23 +75,45 @@ return {
           },
           winblend = 40,
         },
+        mappings = {
+          ["<esc>"] = "close_window",
+        },
       },
       filesystem = {
+        use_libuv_file_watcher = true,
         filtered_items = {
           visible = true, -- when true, they will just be displayed differently than normal items
           force_visible_in_empty_folder = true, -- when true, hidden files will be shown if the root folder is otherwise empty
           hide_dotfiles = false,
           hide_hidden = false, -- only works on Windows for hidden files/directories
+          hide_gitignored = false,
           hide_by_name = {
             "node_modules",
           },
           never_show = { -- remains hidden even if visible is toggled to true, this overrides always_show
             ".DS_Store",
             "thumbs.db",
-            ".git",
           },
         },
-        follow_current_file = { enabled = true },
+        follow_current_file = { enabled = true, leave_dirs_open = true },
+      },
+      event_handlers = {
+        {
+          event = "neo_tree_window_after_open",
+          handler = function(args)
+            if args.position == "left" or args.position == "right" then
+              vim.cmd("wincmd =")
+            end
+          end,
+        },
+        {
+          event = "neo_tree_window_after_close",
+          handler = function(args)
+            if args.position == "left" or args.position == "right" then
+              vim.cmd("wincmd =")
+            end
+          end,
+        },
       },
     })
   end,
diff --git a/lua/plugins/neotest.lua b/lua/plugins/neotest.lua
new file mode 100644
index 0000000..c3995fb
--- /dev/null
+++ b/lua/plugins/neotest.lua
@@ -0,0 +1,117 @@
+return {
+  "nvim-neotest/neotest",
+  dependencies = {
+    "nvim-lua/plenary.nvim",
+    "nvim-treesitter/nvim-treesitter",
+    "antoinemadec/FixCursorHold.nvim",
+    "nvim-neotest/neotest-go",
+  },
+  keys = {
+    {
+      "<leader>tt",
+      function()
+        require("neotest").run.run(vim.fn.expand("%"))
+      end,
+      desc = "Run File",
+    },
+    {
+      "<leader>tT",
+      function()
+        require("neotest").run.run(vim.loop.cwd())
+      end,
+      desc = "Run All Test Files",
+    },
+    {
+      "<leader>tr",
+      function()
+        require("neotest").run.run()
+      end,
+      desc = "Run Nearest",
+    },
+    {
+      "<leader>ts",
+      function()
+        require("neotest").summary.toggle()
+      end,
+      desc = "Toggle Summary",
+    },
+    {
+      "<leader>to",
+      function()
+        require("neotest").output.open({ enter = true, auto_close = true })
+      end,
+      desc = "Show Output",
+    },
+    {
+      "<leader>tO",
+      function()
+        require("neotest").output_panel.toggle()
+      end,
+      desc = "Toggle Output Panel",
+    },
+    {
+      "<leader>tS",
+      function()
+        require("neotest").run.stop()
+      end,
+      desc = "Stop",
+    },
+  },
+  config = function()
+    -- get neotest namespace (api call creates or returns namespace)
+    local neotest_ns = vim.api.nvim_create_namespace("neotest")
+
+    vim.diagnostic.config({
+      virtual_text = {
+        format = function(diagnostic)
+          local message = diagnostic.message:gsub("\n", " "):gsub("\t", " "):gsub("%s+", " "):gsub("^%s+", "")
+          return message
+        end,
+      },
+    }, neotest_ns)
+
+    ---@diagnostic disable-next-line: missing-fields
+    require("neotest").setup({
+      -- your neotest config here
+      adapters = {
+        require("neotest-vitest"),
+        require("neotest-playwright"),
+        require("neotest-phpunit"),
+      },
+      icons = {
+        child_indent = "│",
+        child_prefix = "├",
+        collapsed = "─",
+        expanded = "╮",
+        failed = "✘",
+        final_child_indent = " ",
+        final_child_prefix = "╰",
+        non_collapsible = "─",
+        passed = "✓",
+        running = "",
+        running_animated = { "/", "|", "\\", "-", "/", "|", "\\", "-" },
+        skipped = "↓",
+        unknown = "",
+      },
+      status = {
+        enabled = true,
+        signs = true,
+        virtual_text = true,
+      },
+      floating = {
+        enabled = true,
+        border = "rounded",
+        max_height = 0.9,
+        max_width = 0.9,
+        options = {},
+      },
+      -- output = { open_on_run = true },
+      quickfix = {
+        enabled = true,
+        open = function()
+          vim.cmd("Trouble quickfix")
+        end,
+      },
+    })
+  end,
+}
diff --git a/lua/plugins/noice.lua b/lua/plugins/noice.lua
new file mode 100644
index 0000000..a2a6fad
--- /dev/null
+++ b/lua/plugins/noice.lua
@@ -0,0 +1,39 @@
+return {
+    "folke/noice.nvim",
+    event = "VeryLazy",
+    enabled = true,
+    opts = {
+        -- add any options here
+    },
+    dependencies = {
+        -- if you lazy-load any plugin below, make sure to add proper `module="..."` entries
+        "MunifTanjim/nui.nvim",
+        -- OPTIONAL:
+        --   `nvim-notify` is only needed, if you want to use the notification view.
+        --   If not available, we use `mini` as the fallback
+        "rcarriga/nvim-notify",
+    },
+    config = function()
+        require("noice").setup({
+            lsp = {
+                -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
+                override = {
+                    ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
+                    ["vim.lsp.util.stylize_markdown"] = true,
+                    ["cmp.entry.get_documentation"] = true,
+                },
+            },
+            -- you can enable a preset for easier configuration
+            presets = {
+                bottom_search = true,         -- use a classic bottom cmdline for search
+                command_palette = true,       -- position the cmdline and popupmenu together
+                long_message_to_split = true, -- long messages will be sent to a split
+                inc_rename = false,           -- enables an input dialog for inc-rename.nvim
+                lsp_doc_border = true,        -- add a border to hover docs and signature help
+            },
+            -- cmdline = {
+            --     view = "cmdline",
+            -- },
+        })
+    end,
+}
diff --git a/lua/plugins/none-ls.lua b/lua/plugins/none-ls.lua
new file mode 100644
index 0000000..1e75433
--- /dev/null
+++ b/lua/plugins/none-ls.lua
@@ -0,0 +1,89 @@
+return {
+  {
+    "nvimtools/none-ls.nvim",
+    event = { "BufReadPre", "BufNewFile" },
+    dependencies = {
+      "jay-babu/mason-null-ls.nvim",
+      "nvim-lua/plenary.nvim",
+      "nvimtools/none-ls-extras.nvim",
+      "gbprod/none-ls-shellcheck.nvim",
+    },
+    config = function()
+      require("null-ls").register(require("none-ls-shellcheck.diagnostics"))
+      require("null-ls").register(require("none-ls-shellcheck.code_actions"))
+
+      local mason_null_ls = require("mason-null-ls")
+      local null_ls = require("null-ls")
+
+      local null_ls_utils = require("null-ls.utils")
+
+      mason_null_ls.setup({
+        ensure_installed = {
+          "prettier", -- prettier formatter
+          "stylua", -- lua formatter
+          "eslint_d", -- js linter
+          "shellcheck", -- shell linter
+          "yamllint", -- yaml linter
+          "buf", -- buf formatter
+          "shfmt", -- shell formatter
+          "yamlfmt", -- yaml formatter
+          "pretty_php", -- php formatter
+          "rustywind", -- TailwindCSS organizer
+          -- "spell", -- spell checker
+        },
+      })
+
+      local formatting = null_ls.builtins.formatting
+      local diagnostics = null_ls.builtins.diagnostics
+      local code_actions = null_ls.builtins.code_actions
+
+      local augroup = vim.api.nvim_create_augroup("LspFormatting", {})
+
+      null_ls.setup({
+        root_dir = null_ls_utils.root_pattern(".null-ls-root", "Makefile", ".git", "package.json"),
+
+        sources = {
+          formatting.stylua,
+          formatting.prettier,
+          -- formatting.gofumpt,
+          formatting.buf,
+          formatting.shfmt,
+          formatting.yamlfmt,
+          formatting.pretty_php,
+          formatting.rustywind,
+
+          -- diagnostics.eslint_d,
+          -- diagnosticsueslint_d.with({ -- js/ts linter
+          --   condition = function(utils)
+          --     return utils.root_has_file({ ".eslintrc.js", ".eslintrc.cjs" }) -- only enable if root has .eslintrc.js or .eslintrc.cjs
+          --   end,
+          -- }),
+          -- diagnostics.shellcheck,
+          diagnostics.yamllint,
+
+          code_actions.gitsigns,
+          code_actions.refactoring,
+        },
+        -- configure format on save
+        on_attach = function(current_client, bufnr)
+          if current_client.supports_method("textDocument/formatting") then
+            vim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })
+            vim.api.nvim_create_autocmd("BufWritePre", {
+              group = augroup,
+              buffer = bufnr,
+              callback = function()
+                vim.lsp.buf.format({
+                  filter = function(client)
+                    --  only use null-ls for formatting instead of lsp server
+                    return client.name == "null-ls"
+                  end,
+                  bufnr = bufnr,
+                })
+              end,
+            })
+          end
+        end,
+      })
+    end,
+  },
+}
diff --git a/lua/plugins/nvim-dap.lua b/lua/plugins/nvim-dap.lua
new file mode 100644
index 0000000..ba85f24
--- /dev/null
+++ b/lua/plugins/nvim-dap.lua
@@ -0,0 +1,42 @@
+return {
+  "mfussenegger/nvim-dap",
+  event = "BufRead",
+  dependencies = {
+    "rcarriga/nvim-dap-ui",
+    "theHamsta/nvim-dap-virtual-text",
+    "nvim-telescope/telescope-dap.nvim",
+    "folke/neodev.nvim",
+    "nvim-neotest/nvim-nio",
+  },
+  config = function()
+    local dap = require("dap")
+    local dapui = require("dapui")
+    local virtual_text = require("nvim-dap-virtual-text")
+
+    dap.adapters.lldb = {
+      type = "executable",
+      command = "/opt/homebrew/opt/llvm/bin/lldb-vscode", -- adjust as needed, must be absolute path
+      name = "lldb",
+    }
+
+    local lldb = {
+      name = "Launch lldb",
+      type = "lldb", -- matches the adapter
+      request = "launch", -- could also attach to a currently running process
+      program = function()
+        return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
+      end,
+      cwd = "${workspaceFolder}",
+      stopOnEntry = false,
+      args = {},
+      runInTerminal = false,
+    }
+
+    dap.configurations.rust = {
+      lldb,
+    }
+
+    dapui.setup()
+    virtual_text.setup({})
+  end,
+}
diff --git a/lua/plugins/nvim-spectre.lua b/lua/plugins/nvim-spectre.lua
deleted file mode 100644
index 3c0b012..0000000
--- a/lua/plugins/nvim-spectre.lua
+++ /dev/null
@@ -1,23 +0,0 @@
-return {
-  {
-    "nvim-pack/nvim-spectre",
-    dependencies = {
-      "nvim-lua/plenary.nvim",
-    },
-    keys = {
-      {
-        "<C-S-F>",
-        '<cmd>lua require("spectre").open_visual({select_word=true,is_insert_mode=true,live_update=true})<CR>',
-        desc = "Global Search",
-      },
-    },
-    opts = {
-      is_insert_mode = true,
-      select_word = true,
-      live_update = true,
-      lnum_for_results = true,
-      color_devicons = true,
-      default = { find = { options = {} } },
-    },
-  },
-}
diff --git a/lua/plugins/nvim-treesitter.lua b/lua/plugins/nvim-treesitter.lua
new file mode 100644
index 0000000..71c3106
--- /dev/null
+++ b/lua/plugins/nvim-treesitter.lua
@@ -0,0 +1,113 @@
+return {
+  {
+    "nvim-treesitter/nvim-treesitter",
+    version = false,
+    build = ":TSUpdate",
+    event = { "BufReadPost", "BufNewFile" },
+    dependencies = {
+      "nvim-treesitter/nvim-treesitter-textobjects",
+    },
+    config = function()
+      require("nvim-treesitter.configs").setup({
+        sync_install = false,
+        ignore_install = { "javascript" },
+        modules = {},
+        highlight = {
+          enable = true,
+          additional_vim_regex_highlighting = false,
+        },
+        indent = { enable = true },
+        -- context_commentstring = { enable = true, enable_autocmd = false },
+        auto_install = true,
+        ensure_installed = {
+          -- "bash",
+          "c",
+          "html",
+          "javascript",
+          "json",
+          "lua",
+          "luadoc",
+          "luap",
+          "markdown",
+          "markdown_inline",
+          "python",
+          "query",
+          "regex",
+          "tsx",
+          "typescript",
+          "vim",
+          "vimdoc",
+          "yaml",
+          "rust",
+          "go",
+          "gomod",
+          "gowork",
+          "gosum",
+          "terraform",
+          "proto",
+        },
+        incremental_selection = {
+          enable = true,
+          keymaps = {
+            init_selection = "<leader>vv",
+            node_incremental = "+",
+            scope_incremental = false,
+            node_decremental = "_",
+          },
+        },
+        textobjects = {
+          select = {
+            enable = true,
+            lookahead = true,
+
+            keymaps = {
+              -- You can use the capture groups defined in textobjects.scm
+              ["af"] = { query = "@function.outer", desc = "around a function" },
+              ["if"] = { query = "@function.inner", desc = "inner part of a function" },
+              ["ac"] = { query = "@class.outer", desc = "around a class" },
+              ["ic"] = { query = "@class.inner", desc = "inner part of a class" },
+              ["ai"] = { query = "@conditional.outer", desc = "around an if statement" },
+              ["ii"] = { query = "@conditional.inner", desc = "inner part of an if statement" },
+              ["al"] = { query = "@loop.outer", desc = "around a loop" },
+              ["il"] = { query = "@loop.inner", desc = "inner part of a loop" },
+              ["ap"] = { query = "@parameter.outer", desc = "around parameter" },
+              ["ip"] = { query = "@parameter.inner", desc = "inside a parameter" },
+            },
+            selection_modes = {
+              ["@parameter.outer"] = "v", -- charwise
+              ["@parameter.inner"] = "v", -- charwise
+              ["@function.outer"] = "v", -- charwise
+              ["@conditional.outer"] = "V", -- linewise
+              ["@loop.outer"] = "V", -- linewise
+              ["@class.outer"] = "<c-v>", -- blockwise
+            },
+            include_surrounding_whitespace = false,
+          },
+          move = {
+            enable = true,
+            set_jumps = true, -- whether to set jumps in the jumplist
+            goto_previous_start = {
+              ["[f"] = { query = "@function.outer", desc = "Previous function" },
+              ["[c"] = { query = "@class.outer", desc = "Previous class" },
+              ["[p"] = { query = "@parameter.inner", desc = "Previous parameter" },
+            },
+            goto_next_start = {
+              ["]f"] = { query = "@function.outer", desc = "Next function" },
+              ["]c"] = { query = "@class.outer", desc = "Next class" },
+              ["]p"] = { query = "@parameter.inner", desc = "Next parameter" },
+            },
+          },
+          swap = {
+            enable = true,
+            swap_next = {
+              ["<leader>a"] = "@parameter.inner",
+            },
+            swap_previous = {
+              ["<leader>A"] = "@parameter.inner",
+            },
+          },
+        },
+      })
+    end,
+  },
+}
diff --git a/lua/plugins/symbols-outline.lua b/lua/plugins/symbols-outline.lua
deleted file mode 100644
index c448c90..0000000
--- a/lua/plugins/symbols-outline.lua
+++ /dev/null
@@ -1,10 +0,0 @@
-return {
-  -- add symbols-outline
-  {
-    "simrat39/symbols-outline.nvim",
-    cmd = "SymbolsOutline",
-    keys = { { "<leader>cs", "<cmd>SymbolsOutline<cr>", desc = "Symbols Outline" } },
-    config = true,
-    opts = { auto_preview = true, auto_close = true, wrap = true },
-  },
-}
diff --git a/lua/plugins/telescope.lua b/lua/plugins/telescope.lua
index ea3231a..7710db6 100644
--- a/lua/plugins/telescope.lua
+++ b/lua/plugins/telescope.lua
@@ -1,20 +1,187 @@
 return {
-  "nvim-telescope/telescope.nvim",
-  dependencies = {
-    "nvim-lua/plenary.nvim",
-    {
-      "nvim-telescope/telescope-fzf-native.nvim",
-      build = "make",
-      config = function()
-        require("telescope").load_extension("fzf")
-      end,
-    },
-  },
-  opts = {
-    defaults = {
-      layout_strategy = "flex",
-      winblend = 40,
-      hidden = true,
+  {
+    "nvim-telescope/telescope.nvim",
+    cmd = "Telescope",
+    version = false,
+    lazy = true,
+    dependencies = {
+      "nvim-lua/plenary.nvim",
+      "nvim-tree/nvim-web-devicons",
+      { "nvim-telescope/telescope-fzf-native.nvim", build = "make" },
+      "nvim-telescope/telescope-ui-select.nvim",
+      "telescope-dap.nvim",
+      "kkharji/sqlite.lua",
+      "nvim-telescope/telescope-frecency.nvim",
     },
+    config = function()
+      local telescope = require("telescope")
+      local actions = require("telescope.actions")
+      local trouble = require("trouble.providers.telescope")
+      local icons = require("config.icons")
+
+      vim.api.nvim_create_autocmd("FileType", {
+        pattern = "TelescopeResults",
+        callback = function(ctx)
+          vim.api.nvim_buf_call(ctx.buf, function()
+            vim.fn.matchadd("TelescopeParent", "\t\t.*$")
+            vim.api.nvim_set_hl(0, "TelescopeParent", { link = "Comment" })
+          end)
+        end,
+      })
+
+      local function formattedName(_, path)
+        local tail = vim.fs.basename(path)
+        local parent = vim.fs.dirname(path)
+        if parent == "." then
+          return tail
+        end
+        return string.format("%s\t\t%s", tail, parent)
+      end
+
+      telescope.setup({
+        file_ignore_patterns = { "%.git/." },
+        -- borderchars = { "█", " ", "▀", "█", "█", " ", " ", "▀" },
+        defaults = {
+          mappings = {
+            i = {
+              ["<esc>"] = actions.close,
+              ["<C-t>"] = trouble.open_with_trouble,
+            },
+
+            n = { ["<C-t>"] = trouble.open_with_trouble },
+          },
+          previewer = false,
+          prompt_prefix = " " .. icons.ui.Telescope .. " ",
+          selection_caret = icons.ui.BoldArrowRight .. " ",
+          file_ignore_patterns = { "node_modules", "package-lock.json" },
+          initial_mode = "insert",
+          select_strategy = "reset",
+          sorting_strategy = "ascending",
+          color_devicons = true,
+          set_env = { ["COLORTERM"] = "truecolor" }, -- default = nil,
+          layout_config = {
+            prompt_position = "top",
+            preview_cutoff = 120,
+          },
+          vimgrep_arguments = {
+            "rg",
+            "--color=never",
+            "--no-heading",
+            "--with-filename",
+            "--line-number",
+            "--column",
+            "--smart-case",
+            "--hidden",
+            "--glob=!.git/",
+          },
+        },
+        pickers = {
+          find_files = {
+            previewer = false,
+            path_display = formattedName,
+            layout_config = {
+              height = 0.4,
+              prompt_position = "top",
+              preview_cutoff = 120,
+            },
+          },
+          git_files = {
+            previewer = false,
+            path_display = formattedName,
+            layout_config = {
+              height = 0.4,
+              prompt_position = "top",
+              preview_cutoff = 120,
+            },
+          },
+          buffers = {
+            path_display = formattedName,
+            mappings = {
+              i = {
+                ["<c-d>"] = actions.delete_buffer,
+              },
+              n = {
+                ["<c-d>"] = actions.delete_buffer,
+              },
+            },
+            previewer = false,
+            initial_mode = "normal",
+            -- theme = "dropdown",
+            layout_config = {
+              height = 0.4,
+              width = 0.6,
+              prompt_position = "top",
+              preview_cutoff = 120,
+            },
+          },
+          current_buffer_fuzzy_find = {
+            previewer = true,
+            layout_config = {
+              prompt_position = "top",
+              preview_cutoff = 120,
+            },
+          },
+          live_grep = {
+            only_sort_text = true,
+            previewer = true,
+          },
+          grep_string = {
+            only_sort_text = true,
+            previewer = true,
+          },
+          lsp_references = {
+            show_line = false,
+            previewer = true,
+          },
+          treesitter = {
+            show_line = false,
+            previewer = true,
+          },
+          colorscheme = {
+            enable_preview = true,
+          },
+        },
+        extensions = {
+          fzf = {
+            fuzzy = true, -- false will only do exact matching
+            override_generic_sorter = true, -- override the generic sorter
+            override_file_sorter = true, -- override the file sorter
+            case_mode = "smart_case", -- or "ignore_case" or "respect_case"
+          },
+          ["ui-select"] = {
+            require("telescope.themes").get_dropdown({
+              previewer = false,
+              initial_mode = "normal",
+              sorting_strategy = "ascending",
+              layout_strategy = "horizontal",
+              layout_config = {
+                horizontal = {
+                  width = 0.5,
+                  height = 0.4,
+                  preview_width = 0.6,
+                },
+              },
+            }),
+          },
+          frecency = {
+            default_workspace = "CWD",
+            show_scores = false,
+            show_unindexed = true,
+            disable_devicons = false,
+            ignore_patterns = {
+              "*.git/*",
+              "*/tmp/*",
+              "*/lua-language-server/*",
+            },
+          },
+        },
+      })
+      telescope.load_extension("fzf")
+      telescope.load_extension("ui-select")
+      -- telescope.load_extension("refactoring")
+      telescope.load_extension("dap")
+      telescope.load_extension("frecency")
+      telescope.load_extension("notify")
+    end,
   },
 }
diff --git a/lua/plugins/todo-comments.lua b/lua/plugins/todo-comments.lua
new file mode 100644
index 0000000..d703315
--- /dev/null
+++ b/lua/plugins/todo-comments.lua
@@ -0,0 +1,46 @@
+return {
+    "folke/todo-comments.nvim",
+    enabled = true,
+    dependencies = "nvim-lua/plenary.nvim",
+    cmd = { "TodoTrouble", "TodoTelescope" },
+    event = { "BufReadPost", "BufNewFile" },
+    config = function()
+        require("todo-comments").setup({
+            keywords = {
+                FIX = { icon = " ", color = "error", alt = { "FIXME", "BUG", "FIXIT", "ISSUE" } },
+                TODO = { icon = " ", color = "info" },
+                HACK = { icon = " ", color = "warning" },
+                WARN = { icon = " ", color = "warning", alt = { "WARNING", "XXX" } },
+                PERF = { icon = " ", alt = { "OPTIM", "PERFORMANCE", "OPTIMIZE" } },
+                NOTE = { icon = " ", color = "hint", alt = { "INFO" } },
+                TEST = { icon = "⏲ ", color = "test", alt = { "TESTING", "PASSED", "FAILED" } },
+            },
+            gui_style = {
+                fg = "NONE",                         -- The gui style to use for the fg highlight group.
+                bg = "BOLD",                         -- The gui style to use for the bg highlight group.
+            },
+            merge_keywords = true,                   -- when true, custom keywords will be merged with the defaults
+            highlight = {
+                multiline = true,                    -- enable multine todo comments
+                multiline_pattern = "^.",            -- lua pattern to match the next multiline from the start of the matched keyword
+                multiline_context = 10,              -- extra lines that will be re-evaluated when changing a line
+                before = "",                         -- "fg" or "bg" or empty
+                keyword = "wide",                    -- "fg", "bg", "wide", "wide_bg", "wide_fg" or empty.
+                after = "fg",                        -- "fg" or "bg" or empty
+                pattern = [[.*<(KEYWORDS)\s*:]],     -- pattern or table of patterns, used for highlighting (vim regex)
+                comments_only = true,                -- uses treesitter to match keywords in comments only
+                max_line_len = 400,                  -- ignore lines longer than this
+                exclude = {},                        -- list of file types to exclude highlighting
+            },
+            -- list of highlight groups or use the hex color if hl not found as a fallback
+            colors = {
+                error = { "DiagnosticError", "ErrorMsg", "#DC2626" },
+                warning = { "DiagnosticWarn", "WarningMsg", "#FBBF24" },
+                info = { "DiagnosticInfo", "#2563EB" },
+                hint = { "DiagnosticHint", "#10B981" },
+                default = { "Identifier", "#7C3AED" },
+                test = { "Identifier", "#FF00FF" },
+            },
+        })
+    end
+}
diff --git a/lua/plugins/toggleterm.lua b/lua/plugins/toggleterm.lua
new file mode 100644
index 0000000..42620f8
--- /dev/null
+++ b/lua/plugins/toggleterm.lua
@@ -0,0 +1,26 @@
+return {
+  'akinsho/toggleterm.nvim',
+  version = "*",
+  config = function()
+    require("toggleterm").setup {
+      size = 20,
+      open_mapping = [[<c-t>]],
+      shade_filetypes = {},
+      shade_terminals = true,
+      shading_factor = 2,
+      start_in_insert = true,
+      persist_size = false,
+      direction = "float",
+      close_on_exit = true,
+      shell = vim.o.shell,
+      float_opts = {
+        border = "curved",
+        winblend = 0,
+        highlights = {
+          border = "Normal",
+          background = "Normal",
+        },
+      },
+    }
+  end,
+}
diff --git a/lua/plugins/trouble.lua b/lua/plugins/trouble.lua
new file mode 100644
index 0000000..f0d8958
--- /dev/null
+++ b/lua/plugins/trouble.lua
@@ -0,0 +1,35 @@
+return {
+  "folke/trouble.nvim",
+  cmd = { "TroubleToggle", "Trouble" },
+  opts = { use_diagnostic_signs = true },
+  lazy = true,
+  config = function()
+    require("trouble").setup {
+      -- "workspace_diagnostics", "document_diagnostics", "quickfix", "lsp_references", "loclist"
+      mode = "workspace_diagnostics",
+      position = "bottom", -- position of the list can be: bottom, top, left, right
+      height = 15,
+      padding = false,
+      action_keys = {
+        -- key mappings for actions in the trouble list
+        close = "q",                -- close the list
+        cancel = "<esc>",           -- cancel the preview and get back to your last window / buffer / cursor
+        refresh = "r",              -- manually refresh
+        jump = { "<cr>", "<tab>" }, -- jump to the diagnostic or open / close folds
+        open_split = { "<c-x>" },   -- open buffer in new split
+        open_vsplit = { "<c-v>" },  -- open buffer in new vsplit
+        open_tab = { "<c-t>" },     -- open buffer in new tab
+        jump_close = { "o" },       -- jump to the diagnostic and close the list
+        toggle_mode = "m",          -- toggle between "workspace" and "document" diagnostics mode
+        toggle_preview = "P",       -- toggle auto_preview
+        hover = "K",                -- opens a small popup with the full multiline message
+        preview = "p",              -- preview the diagnostic location
+        close_folds = { "zM" },     -- close all folds
+        open_folds = { "zR" },      -- open all folds
+        toggle_fold = { "za" },     -- toggle fold of current file
+      },
+      auto_jump = {},
+      use_diagnostic_signs = true,
+    }
+  end
+}
diff --git a/lua/plugins/typescript-tools.lua b/lua/plugins/typescript-tools.lua
new file mode 100644
index 0000000..fdd5361
--- /dev/null
+++ b/lua/plugins/typescript-tools.lua
@@ -0,0 +1,31 @@
+return {
+  "pmizio/typescript-tools.nvim",
+  event = "BufReadPre",
+  dependencies = { "nvim-lua/plenary.nvim", "neovim/nvim-lspconfig" },
+  opts = {},
+  config = function()
+    require("typescript-tools").setup({
+      settings = {
+        separate_diagnostic_server = true,
+        expose_as_code_action = "all",
+        -- tsserver_plugins = {},
+        tsserver_max_memory = "auto",
+        complete_function_calls = true,
+        include_completions_with_insert_text = true,
+        tsserver_file_preferences = {
+          includeInlayParameterNameHints = "all", -- "none" | "literals" | "all";
+          includeInlayParameterNameHintsWhenArgumentMatchesName = true,
+          includeInlayFunctionParameterTypeHints = true,
+          includeInlayVariableTypeHints = true,
+          includeInlayVariableTypeHintsWhenTypeMatchesName = true,
+          includeInlayPropertyDeclarationTypeHints = true,
+          includeInlayFunctionLikeReturnTypeHints = true,
+          includeInlayEnumMemberValueHints = true,
+          includeCompletionsForModuleExports = true,
+          quotePreference = "auto",
+          -- autoImportFileExcludePatterns = { "node_modules/*", ".git/*" },
+        },
+      }
+    })
+  end
+}
diff --git a/lua/plugins/vim-css-color.lua b/lua/plugins/vim-css-color.lua
deleted file mode 100644
index 2d3004f..0000000
--- a/lua/plugins/vim-css-color.lua
+++ /dev/null
@@ -1,3 +0,0 @@
-return {
-  { "ap/vim-css-color" },
-}
diff --git a/lua/plugins/vim-surround.lua b/lua/plugins/vim-surround.lua
deleted file mode 100644
index 06e53f0..0000000
--- a/lua/plugins/vim-surround.lua
+++ /dev/null
@@ -1,3 +0,0 @@
-return {
-  { "tpope/vim-surround" },
-}
diff --git a/lua/plugins/visual.lua b/lua/plugins/visual.lua
deleted file mode 100644
index a6ea0b9..0000000
--- a/lua/plugins/visual.lua
+++ /dev/null
@@ -1,16 +0,0 @@
-return {
-  {
-    "00sapo/visual.nvim",
-    enabled = false,
-    opts = {
-      commands = {
-        move_up_then_normal = { amend = true },
-        move_down_then_normal = { amend = true },
-        move_right_then_normal = { amend = true },
-        move_left_then_normal = { amend = true },
-      },
-    },
-    dependencies = { "nvim-treesitter", "nvim-treesitter-textobjects" },
-    event = "VeryLazy",
-  },
-}
diff --git a/lua/plugins/which-key.lua b/lua/plugins/which-key.lua
index 0de3fb7..e65183f 100644
--- a/lua/plugins/which-key.lua
+++ b/lua/plugins/which-key.lua
@@ -2,9 +2,74 @@ return {
   "folke/which-key.nvim",
   event = "VeryLazy",
   opts = { defaults = { mode = { "n", "v" }, ["<leader>p"] = { name = "Package Manager" } } },
+  lazy = true,
+  opts = {
+    plugins = {
+      marks = false,     -- shows a list of your marks on ' and `
+      registers = false, -- shows your registers on " in NORMAL or <C-r> in INSERT mode
+      spelling = {
+        enabled = true,
+        suggestions = 20,
+      },
+      -- the presets plugin, adds help for a bunch of default keybindings in Neovim
+      -- No actual key bindings are created
+      presets = {
+        operators = false,    -- adds help for operators like d, y, ...
+        motions = false,      -- adds help for motions
+        text_objects = false, -- help for text objects triggered after entering an operator
+        windows = false,      -- default bindings on <c-w>
+        nav = false,          -- misc bindings to work with windows
+        z = false,            -- bindings for folds, spelling and others prefixed with z
+        g = false,            -- bindings for prefixed with g
+      },
+    },
+    operators = { gc = "Comments" }, -- show the currently pressed key and its label as a message in the command line
+    icons = {
+      breadcrumb = "»", -- symbol used in the command line area that shows your active key combo
+      separator = require('config.icons').ui.BoldArrowRight, -- symbol used between a key and it's label
+      group = "+", -- symbol prepended to a group
+    },
+    popup_mappings = {
+      scroll_down = "<c-d>", -- binding to scroll down inside the popup
+      scroll_up = "<c-u>",   -- binding to scroll up inside the popup
+    },
+    window = {
+      border = "single",        -- none, single, double, shadow
+      position = "bottom",      -- bottom, top
+      margin = { 2, 0, 2, 0 },  -- extra window margin [top, right, bottom, left]
+      padding = { 2, 2, 2, 2 }, -- extra window padding [top, right, bottom, left]
+      winblend = 0,
+      zindex = 1000,            -- positive value to position WhichKey above other floating windows.
+    },
+    layout = {
+      height = { min = 4, max = 25 },                                             -- min and max height of the columns
+      width = { min = 20, max = 50 },                                             -- min and max width of the columns
+      spacing = 3,                                                                -- spacing between columns
+      align = "left",                                                             -- align columns left, center or right
+    },
+    ignore_missing = false,                                                       -- enable this to hide mappings for which you didn't specify a label
+    hidden = { "<silent>", "<cmd>", "<Cmd>", "<CR>", "call", "lua", "^:", "^ " }, -- hide mapping boilerplate
+    show_help = true,                                                             -- show help message on the command line when the popup is visible
+    show_keys = true,
+    triggers = "auto",                                                            -- automatically setup triggers
+    triggers_blacklist = {
+      i = { "j", "k" },
+      v = { "j", "k" },
+    },
+    -- Disabled by default for Telescope
+    disable = {
+      buftypes = {},
+      filetypes = { "TelescopePrompt" },
+    },
+  },
   config = function(_, opts)
-    local wk = require("which-key")
-    wk.setup(opts)
-    wk.register(opts.defaults)
-  end,
+    local which_key = require("which-key")
+    which_key.setup(opts)
+    which_key.register(require('config.which-key.defaults'), {
+      mode = "n",
+      prefix = "<leader>",
+    })
+
+    which_key.register(require('config.which-key.non_leader'))
+  end
 }
diff --git a/lua/plugins/windows.lua b/lua/plugins/windows.lua
deleted file mode 100644
index 85fc5c3..0000000
--- a/lua/plugins/windows.lua
+++ /dev/null
@@ -1,26 +0,0 @@
-return {
-  {
-    "anuvyklack/windows.nvim",
-    event = "VeryLazy",
-    enabled = false,
-    dependencies = {
-      "anuvyklack/middleclass",
-      "anuvyklack/animation.nvim",
-    },
-    init = function()
-      require("windows").setup({
-        autowidth = {
-          winminwidth = 0.25,
-          winwidth = 100,
-          equalalways = false,
-        },
-      })
-    end,
-    keys = {
-      { "<c-w>z", "<cmd>WindowsMaximize<cr>", mode = "n", desc = "Maximize window" },
-      { "<c-w>_", "<cmd>WindowsMaximizeVertically<cr>", mode = "n", desc = "Maximize window vertically" },
-      { "<c-w>|", "<cmd>WindowsMaximizeHorizontally<cr>", mode = "n", desc = "Maximize window horizontally" },
-      { "<c-w>=", "<cmd>WindowsEqualize<cr>", mode = "n", desc = "Equalize window" },
-    },
-  },
-}
diff --git a/plugin/ft.lua b/plugin/ft.lua
new file mode 100644
index 0000000..611e88c
--- /dev/null
+++ b/plugin/ft.lua
@@ -0,0 +1,9 @@
+-- if a file is a .env or .envrc file, set the filetype to sh
+vim.filetype.add({
+  filename = {
+    [".env"] = "sh",
+    [".envrc"] = "sh",
+    ["*.env"] = "sh",
+    ["*.envrc"] = "sh"
+  }
+})
diff --git a/stylua.toml b/stylua.toml
index 0f90030..5d6c50d 100644
--- a/stylua.toml
+++ b/stylua.toml
@@ -1,3 +1,3 @@
 indent_type = "Spaces"
 indent_width = 2
-column_width = 120
+column_width = 120
\ No newline at end of file
